Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    CLOSEBRACE
    DIV
    GEQ
    LEQ
    MINUS
    MOD
    MUL
    OPENBRACE
    PLUS
    avisar
    es
    fin_explicar
    hacer
    para
    tratar

Grammar

Rule 0     S' -> main_program
Rule 1     main_program -> comienzo OPENCURLY statements CLOSECURLY fin
Rule 2     main_program -> comienzo classes fin
Rule 3     main_program -> comienzo function_heading fin
Rule 4     statements -> identifier_list EQ expression
Rule 5     statements -> introducir type
Rule 6     statements -> imprimir OPENPAR identifier_list CLOSEPAR
Rule 7     statements -> imprimir QUOTATION identifier_list QUOTATION
Rule 8     statements -> regresso OPENPAR expression_list CLOSEPAR
Rule 9     statements -> si OPENPAR expression_list CLOSEPAR otro statements
Rule 10    statements -> optional_statements
Rule 11    statements -> if
Rule 12    statements -> while
Rule 13    statements -> COMMENT
Rule 14    statements -> imprimir OPENPAR expression CLOSEPAR
Rule 15    statements -> imprimir OPENPAR STRLIT CLOSEPAR
Rule 16    statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
Rule 17    statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
Rule 18    identifier_list -> CHRLIT identifier_list
Rule 19    identifier_list -> STRLIT identifier_list
Rule 20    identifier_list -> INTLIT identifier_list
Rule 21    identifier_list -> UNDERSCORE
Rule 22    identifier_list -> empty
Rule 23    empty -> <empty>
Rule 24    expression -> expression
Rule 25    expression -> expression_list COMMA expression
Rule 26    expression -> identifier_list
Rule 27    expression_list -> logical_expression
Rule 28    expression_list -> arithmetic_expression
Rule 29    logical_expression -> expression < expression
Rule 30    logical_expression -> expression > expression
Rule 31    logical_expression -> expression LT expression
Rule 32    logical_expression -> expression GT expression
Rule 33    logical_expression -> expression = expression
Rule 34    logical_expression -> expression NEQ expression
Rule 35    logical_expression -> expression EQ expression
Rule 36    logical_expression -> expression ! expression
Rule 37    logical_expression -> expression OR expression
Rule 38    logical_expression -> expression AND expression
Rule 39    logical_expression -> NOT expression
Rule 40    arithmetic_expression -> expression + expression
Rule 41    arithmetic_expression -> expression - expression
Rule 42    arithmetic_expression -> expression * expression
Rule 43    arithmetic_expression -> expression / expression
Rule 44    arithmetic_expression -> expression % expression
Rule 45    type -> INTLIT identifier_list TILDE
Rule 46    type -> FLTLIT identifier_list TILDE
Rule 47    type -> DBLLIT identifier_list TILDE
Rule 48    type -> CHRLIT identifier_list TILDE
Rule 49    type -> STRLIT identifier_list TILDE
Rule 50    optional_statements -> statement_list
Rule 51    optional_statements -> empty
Rule 52    statement_list -> statements
Rule 53    statement_list -> statement_list statements
Rule 54    if -> si OPENPAR expression_list CLOSEPAR statements
Rule 55    if -> si OPENPAR expression_list CLOSEPAR statements else_if
Rule 56    else_if -> otro OPENPAR expression CLOSEPAR statements else_if
Rule 57    else_if -> empty
Rule 58    while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
Rule 59    while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse
Rule 60    classes -> clase OPENCURLY identifier_list optional_statements CLOSECURLY
Rule 61    function_heading -> explicar OPENPAR parameters TILDE CLOSEPAR
Rule 62    parameters -> type
Rule 63    parameters -> type COMMA parameters
Rule 64    parameters -> empty

Terminals, with rules where they appear

!                    : 36
%                    : 44
*                    : 42
+                    : 40
-                    : 41
/                    : 43
<                    : 29
=                    : 33
>                    : 30
AND                  : 38
ASSIGN               : 16 17
BOOLEAN              : 
CHRLIT               : 18 48
CLOSEBRACE           : 
CLOSECURLY           : 1 60
CLOSEPAR             : 6 8 9 14 15 16 17 54 55 56 58 59 61
COMMA                : 25 63
COMMENT              : 13
DBLLIT               : 47
DIV                  : 
EQ                   : 4 35
FLTLIT               : 46
GEQ                  : 
GT                   : 32
INTLIT               : 20 45
LEQ                  : 
LT                   : 31
MINUS                : 
MOD                  : 
MUL                  : 
NEQ                  : 34
NOT                  : 39
OPENBRACE            : 
OPENCURLY            : 1 60
OPENPAR              : 6 8 9 14 15 16 17 54 55 56 58 59 61
OR                   : 37
PLUS                 : 
QUOTATION            : 7 7
STRLIT               : 15 17 19 49
TILDE                : 45 46 47 48 49 58 58 59 59 61
UNDERSCORE           : 21
VAR                  : 16 16 17 17
avisar               : 
clase                : 60
comienzo             : 1 2 3
error                : 
es                   : 
explicar             : 61
fin                  : 1 2 3
fin_explicar         : 
hacer                : 
imprimir             : 6 7 14 15 16 17
introducir           : 5
mientras             : 58 59
otro                 : 9 56
para                 : 
regresso             : 8
romperse             : 59
si                   : 9 54 55
tratar               : 

Nonterminals, with rules where they appear

arithmetic_expression : 28
classes              : 2
else_if              : 55 56
empty                : 22 51 57 64
expression           : 4 14 16 24 25 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 40 40 41 41 42 42 43 43 44 44 56
expression_list      : 8 9 25 54 55 58 59
function_heading     : 3
identifier_list      : 4 6 7 18 19 20 26 45 46 47 48 49 60
if                   : 11
logical_expression   : 27
main_program         : 0
optional_statements  : 10 58 59 60
parameters           : 61 63
statement_list       : 50 53
statements           : 1 9 52 53 54 55 56
type                 : 5 62 63
while                : 12

Parsing method: LALR

state 0

    (0) S' -> . main_program
    (1) main_program -> . comienzo OPENCURLY statements CLOSECURLY fin
    (2) main_program -> . comienzo classes fin
    (3) main_program -> . comienzo function_heading fin

    comienzo        shift and go to state 2

    main_program                   shift and go to state 1

state 1

    (0) S' -> main_program .



state 2

    (1) main_program -> comienzo . OPENCURLY statements CLOSECURLY fin
    (2) main_program -> comienzo . classes fin
    (3) main_program -> comienzo . function_heading fin
    (60) classes -> . clase OPENCURLY identifier_list optional_statements CLOSECURLY
    (61) function_heading -> . explicar OPENPAR parameters TILDE CLOSEPAR

    OPENCURLY       shift and go to state 3
    clase           shift and go to state 6
    explicar        shift and go to state 7

    classes                        shift and go to state 4
    function_heading               shift and go to state 5

state 3

    (1) main_program -> comienzo OPENCURLY . statements CLOSECURLY fin
    (4) statements -> . identifier_list EQ expression
    (5) statements -> . introducir type
    (6) statements -> . imprimir OPENPAR identifier_list CLOSEPAR
    (7) statements -> . imprimir QUOTATION identifier_list QUOTATION
    (8) statements -> . regresso OPENPAR expression_list CLOSEPAR
    (9) statements -> . si OPENPAR expression_list CLOSEPAR otro statements
    (10) statements -> . optional_statements
    (11) statements -> . if
    (12) statements -> . while
    (13) statements -> . COMMENT
    (14) statements -> . imprimir OPENPAR expression CLOSEPAR
    (15) statements -> . imprimir OPENPAR STRLIT CLOSEPAR
    (16) statements -> . VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> . VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (50) optional_statements -> . statement_list
    (51) optional_statements -> . empty
    (54) if -> . si OPENPAR expression_list CLOSEPAR statements
    (55) if -> . si OPENPAR expression_list CLOSEPAR statements else_if
    (58) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse
    (23) empty -> .
    (52) statement_list -> . statements
    (53) statement_list -> . statement_list statements

  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
    introducir      shift and go to state 10
    imprimir        shift and go to state 11
    regresso        shift and go to state 12
    si              shift and go to state 13
    COMMENT         shift and go to state 17
    VAR             shift and go to state 19
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    mientras        shift and go to state 25
    EQ              reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)

  ! introducir      [ reduce using rule 23 (empty -> .) ]
  ! imprimir        [ reduce using rule 23 (empty -> .) ]
  ! regresso        [ reduce using rule 23 (empty -> .) ]
  ! si              [ reduce using rule 23 (empty -> .) ]
  ! COMMENT         [ reduce using rule 23 (empty -> .) ]
  ! VAR             [ reduce using rule 23 (empty -> .) ]
  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]
  ! mientras        [ reduce using rule 23 (empty -> .) ]

    statements                     shift and go to state 8
    identifier_list                shift and go to state 9
    optional_statements            shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    empty                          shift and go to state 23
    statement_list                 shift and go to state 24

state 4

    (2) main_program -> comienzo classes . fin

    fin             shift and go to state 26


state 5

    (3) main_program -> comienzo function_heading . fin

    fin             shift and go to state 27


state 6

    (60) classes -> clase . OPENCURLY identifier_list optional_statements CLOSECURLY

    OPENCURLY       shift and go to state 28


state 7

    (61) function_heading -> explicar . OPENPAR parameters TILDE CLOSEPAR

    OPENPAR         shift and go to state 29


state 8

    (1) main_program -> comienzo OPENCURLY statements . CLOSECURLY fin
    (52) statement_list -> statements .

  ! shift/reduce conflict for CLOSECURLY resolved as shift
    CLOSECURLY      shift and go to state 30
    introducir      reduce using rule 52 (statement_list -> statements .)
    imprimir        reduce using rule 52 (statement_list -> statements .)
    regresso        reduce using rule 52 (statement_list -> statements .)
    si              reduce using rule 52 (statement_list -> statements .)
    COMMENT         reduce using rule 52 (statement_list -> statements .)
    VAR             reduce using rule 52 (statement_list -> statements .)
    CHRLIT          reduce using rule 52 (statement_list -> statements .)
    STRLIT          reduce using rule 52 (statement_list -> statements .)
    INTLIT          reduce using rule 52 (statement_list -> statements .)
    UNDERSCORE      reduce using rule 52 (statement_list -> statements .)
    mientras        reduce using rule 52 (statement_list -> statements .)
    EQ              reduce using rule 52 (statement_list -> statements .)

  ! CLOSECURLY      [ reduce using rule 52 (statement_list -> statements .) ]


state 9

    (4) statements -> identifier_list . EQ expression

    EQ              shift and go to state 31


state 10

    (5) statements -> introducir . type
    (45) type -> . INTLIT identifier_list TILDE
    (46) type -> . FLTLIT identifier_list TILDE
    (47) type -> . DBLLIT identifier_list TILDE
    (48) type -> . CHRLIT identifier_list TILDE
    (49) type -> . STRLIT identifier_list TILDE

    INTLIT          shift and go to state 33
    FLTLIT          shift and go to state 34
    DBLLIT          shift and go to state 35
    CHRLIT          shift and go to state 36
    STRLIT          shift and go to state 37

    type                           shift and go to state 32

state 11

    (6) statements -> imprimir . OPENPAR identifier_list CLOSEPAR
    (7) statements -> imprimir . QUOTATION identifier_list QUOTATION
    (14) statements -> imprimir . OPENPAR expression CLOSEPAR
    (15) statements -> imprimir . OPENPAR STRLIT CLOSEPAR

    OPENPAR         shift and go to state 38
    QUOTATION       shift and go to state 39


state 12

    (8) statements -> regresso . OPENPAR expression_list CLOSEPAR

    OPENPAR         shift and go to state 40


state 13

    (9) statements -> si . OPENPAR expression_list CLOSEPAR otro statements
    (54) if -> si . OPENPAR expression_list CLOSEPAR statements
    (55) if -> si . OPENPAR expression_list CLOSEPAR statements else_if

    OPENPAR         shift and go to state 41


state 14

    (10) statements -> optional_statements .

    CLOSECURLY      reduce using rule 10 (statements -> optional_statements .)
    introducir      reduce using rule 10 (statements -> optional_statements .)
    imprimir        reduce using rule 10 (statements -> optional_statements .)
    regresso        reduce using rule 10 (statements -> optional_statements .)
    si              reduce using rule 10 (statements -> optional_statements .)
    COMMENT         reduce using rule 10 (statements -> optional_statements .)
    VAR             reduce using rule 10 (statements -> optional_statements .)
    CHRLIT          reduce using rule 10 (statements -> optional_statements .)
    STRLIT          reduce using rule 10 (statements -> optional_statements .)
    INTLIT          reduce using rule 10 (statements -> optional_statements .)
    UNDERSCORE      reduce using rule 10 (statements -> optional_statements .)
    mientras        reduce using rule 10 (statements -> optional_statements .)
    EQ              reduce using rule 10 (statements -> optional_statements .)
    otro            reduce using rule 10 (statements -> optional_statements .)
    TILDE           reduce using rule 10 (statements -> optional_statements .)


state 15

    (11) statements -> if .

    CLOSECURLY      reduce using rule 11 (statements -> if .)
    introducir      reduce using rule 11 (statements -> if .)
    imprimir        reduce using rule 11 (statements -> if .)
    regresso        reduce using rule 11 (statements -> if .)
    si              reduce using rule 11 (statements -> if .)
    COMMENT         reduce using rule 11 (statements -> if .)
    VAR             reduce using rule 11 (statements -> if .)
    CHRLIT          reduce using rule 11 (statements -> if .)
    STRLIT          reduce using rule 11 (statements -> if .)
    INTLIT          reduce using rule 11 (statements -> if .)
    UNDERSCORE      reduce using rule 11 (statements -> if .)
    mientras        reduce using rule 11 (statements -> if .)
    EQ              reduce using rule 11 (statements -> if .)
    otro            reduce using rule 11 (statements -> if .)
    TILDE           reduce using rule 11 (statements -> if .)


state 16

    (12) statements -> while .

    CLOSECURLY      reduce using rule 12 (statements -> while .)
    introducir      reduce using rule 12 (statements -> while .)
    imprimir        reduce using rule 12 (statements -> while .)
    regresso        reduce using rule 12 (statements -> while .)
    si              reduce using rule 12 (statements -> while .)
    COMMENT         reduce using rule 12 (statements -> while .)
    VAR             reduce using rule 12 (statements -> while .)
    CHRLIT          reduce using rule 12 (statements -> while .)
    STRLIT          reduce using rule 12 (statements -> while .)
    INTLIT          reduce using rule 12 (statements -> while .)
    UNDERSCORE      reduce using rule 12 (statements -> while .)
    mientras        reduce using rule 12 (statements -> while .)
    EQ              reduce using rule 12 (statements -> while .)
    otro            reduce using rule 12 (statements -> while .)
    TILDE           reduce using rule 12 (statements -> while .)


state 17

    (13) statements -> COMMENT .

    CLOSECURLY      reduce using rule 13 (statements -> COMMENT .)
    introducir      reduce using rule 13 (statements -> COMMENT .)
    imprimir        reduce using rule 13 (statements -> COMMENT .)
    regresso        reduce using rule 13 (statements -> COMMENT .)
    si              reduce using rule 13 (statements -> COMMENT .)
    COMMENT         reduce using rule 13 (statements -> COMMENT .)
    VAR             reduce using rule 13 (statements -> COMMENT .)
    CHRLIT          reduce using rule 13 (statements -> COMMENT .)
    STRLIT          reduce using rule 13 (statements -> COMMENT .)
    INTLIT          reduce using rule 13 (statements -> COMMENT .)
    UNDERSCORE      reduce using rule 13 (statements -> COMMENT .)
    mientras        reduce using rule 13 (statements -> COMMENT .)
    EQ              reduce using rule 13 (statements -> COMMENT .)
    otro            reduce using rule 13 (statements -> COMMENT .)
    TILDE           reduce using rule 13 (statements -> COMMENT .)


state 18

    (19) identifier_list -> STRLIT . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    EQ              reduce using rule 23 (empty -> .)
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)
    QUOTATION       reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)

  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 42
    empty                          shift and go to state 43

state 19

    (16) statements -> VAR . ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> VAR . ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR

    ASSIGN          shift and go to state 44


state 20

    (18) identifier_list -> CHRLIT . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    EQ              reduce using rule 23 (empty -> .)
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)
    QUOTATION       reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)

  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 45
    empty                          shift and go to state 43

state 21

    (20) identifier_list -> INTLIT . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    EQ              reduce using rule 23 (empty -> .)
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)
    QUOTATION       reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)

  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 46
    empty                          shift and go to state 43

state 22

    (21) identifier_list -> UNDERSCORE .

    EQ              reduce using rule 21 (identifier_list -> UNDERSCORE .)
    introducir      reduce using rule 21 (identifier_list -> UNDERSCORE .)
    imprimir        reduce using rule 21 (identifier_list -> UNDERSCORE .)
    regresso        reduce using rule 21 (identifier_list -> UNDERSCORE .)
    si              reduce using rule 21 (identifier_list -> UNDERSCORE .)
    COMMENT         reduce using rule 21 (identifier_list -> UNDERSCORE .)
    VAR             reduce using rule 21 (identifier_list -> UNDERSCORE .)
    CHRLIT          reduce using rule 21 (identifier_list -> UNDERSCORE .)
    STRLIT          reduce using rule 21 (identifier_list -> UNDERSCORE .)
    INTLIT          reduce using rule 21 (identifier_list -> UNDERSCORE .)
    UNDERSCORE      reduce using rule 21 (identifier_list -> UNDERSCORE .)
    mientras        reduce using rule 21 (identifier_list -> UNDERSCORE .)
    CLOSECURLY      reduce using rule 21 (identifier_list -> UNDERSCORE .)
    <               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    >               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    LT              reduce using rule 21 (identifier_list -> UNDERSCORE .)
    GT              reduce using rule 21 (identifier_list -> UNDERSCORE .)
    =               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    NEQ             reduce using rule 21 (identifier_list -> UNDERSCORE .)
    !               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    OR              reduce using rule 21 (identifier_list -> UNDERSCORE .)
    AND             reduce using rule 21 (identifier_list -> UNDERSCORE .)
    +               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    -               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    *               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    /               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    %               reduce using rule 21 (identifier_list -> UNDERSCORE .)
    otro            reduce using rule 21 (identifier_list -> UNDERSCORE .)
    TILDE           reduce using rule 21 (identifier_list -> UNDERSCORE .)
    CLOSEPAR        reduce using rule 21 (identifier_list -> UNDERSCORE .)
    QUOTATION       reduce using rule 21 (identifier_list -> UNDERSCORE .)
    COMMA           reduce using rule 21 (identifier_list -> UNDERSCORE .)


state 23

    (22) identifier_list -> empty .
    (51) optional_statements -> empty .

  ! reduce/reduce conflict for EQ resolved using rule 22 (identifier_list -> empty .)
    EQ              reduce using rule 22 (identifier_list -> empty .)
    CLOSECURLY      reduce using rule 51 (optional_statements -> empty .)
    introducir      reduce using rule 51 (optional_statements -> empty .)
    imprimir        reduce using rule 51 (optional_statements -> empty .)
    regresso        reduce using rule 51 (optional_statements -> empty .)
    si              reduce using rule 51 (optional_statements -> empty .)
    COMMENT         reduce using rule 51 (optional_statements -> empty .)
    VAR             reduce using rule 51 (optional_statements -> empty .)
    CHRLIT          reduce using rule 51 (optional_statements -> empty .)
    STRLIT          reduce using rule 51 (optional_statements -> empty .)
    INTLIT          reduce using rule 51 (optional_statements -> empty .)
    UNDERSCORE      reduce using rule 51 (optional_statements -> empty .)
    mientras        reduce using rule 51 (optional_statements -> empty .)
    otro            reduce using rule 51 (optional_statements -> empty .)
    TILDE           reduce using rule 51 (optional_statements -> empty .)

  ! EQ              [ reduce using rule 51 (optional_statements -> empty .) ]


state 24

    (50) optional_statements -> statement_list .
    (53) statement_list -> statement_list . statements
    (4) statements -> . identifier_list EQ expression
    (5) statements -> . introducir type
    (6) statements -> . imprimir OPENPAR identifier_list CLOSEPAR
    (7) statements -> . imprimir QUOTATION identifier_list QUOTATION
    (8) statements -> . regresso OPENPAR expression_list CLOSEPAR
    (9) statements -> . si OPENPAR expression_list CLOSEPAR otro statements
    (10) statements -> . optional_statements
    (11) statements -> . if
    (12) statements -> . while
    (13) statements -> . COMMENT
    (14) statements -> . imprimir OPENPAR expression CLOSEPAR
    (15) statements -> . imprimir OPENPAR STRLIT CLOSEPAR
    (16) statements -> . VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> . VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (50) optional_statements -> . statement_list
    (51) optional_statements -> . empty
    (54) if -> . si OPENPAR expression_list CLOSEPAR statements
    (55) if -> . si OPENPAR expression_list CLOSEPAR statements else_if
    (58) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse
    (23) empty -> .
    (52) statement_list -> . statements
    (53) statement_list -> . statement_list statements

  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
  ! reduce/reduce conflict for EQ resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for CLOSECURLY resolved using rule 23 (empty -> .)
  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
  ! reduce/reduce conflict for otro resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for TILDE resolved using rule 23 (empty -> .)
    introducir      shift and go to state 10
    imprimir        shift and go to state 11
    regresso        shift and go to state 12
    si              shift and go to state 13
    COMMENT         shift and go to state 17
    VAR             shift and go to state 19
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    mientras        shift and go to state 25
    EQ              reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)

  ! CLOSECURLY      [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! introducir      [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! imprimir        [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! regresso        [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! si              [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! COMMENT         [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! VAR             [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! CHRLIT          [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! STRLIT          [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! INTLIT          [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! UNDERSCORE      [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! mientras        [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! EQ              [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! otro            [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! TILDE           [ reduce using rule 50 (optional_statements -> statement_list .) ]
  ! introducir      [ reduce using rule 23 (empty -> .) ]
  ! imprimir        [ reduce using rule 23 (empty -> .) ]
  ! regresso        [ reduce using rule 23 (empty -> .) ]
  ! si              [ reduce using rule 23 (empty -> .) ]
  ! COMMENT         [ reduce using rule 23 (empty -> .) ]
  ! VAR             [ reduce using rule 23 (empty -> .) ]
  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]
  ! mientras        [ reduce using rule 23 (empty -> .) ]

    statement_list                 shift and go to state 24
    statements                     shift and go to state 47
    identifier_list                shift and go to state 9
    optional_statements            shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    empty                          shift and go to state 23

state 25

    (58) while -> mientras . OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> mientras . OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse

    OPENPAR         shift and go to state 48


state 26

    (2) main_program -> comienzo classes fin .

    $end            reduce using rule 2 (main_program -> comienzo classes fin .)


state 27

    (3) main_program -> comienzo function_heading fin .

    $end            reduce using rule 3 (main_program -> comienzo function_heading fin .)


state 28

    (60) classes -> clase OPENCURLY . identifier_list optional_statements CLOSECURLY
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)

  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 49
    empty                          shift and go to state 43

state 29

    (61) function_heading -> explicar OPENPAR . parameters TILDE CLOSEPAR
    (62) parameters -> . type
    (63) parameters -> . type COMMA parameters
    (64) parameters -> . empty
    (45) type -> . INTLIT identifier_list TILDE
    (46) type -> . FLTLIT identifier_list TILDE
    (47) type -> . DBLLIT identifier_list TILDE
    (48) type -> . CHRLIT identifier_list TILDE
    (49) type -> . STRLIT identifier_list TILDE
    (23) empty -> .

    INTLIT          shift and go to state 33
    FLTLIT          shift and go to state 34
    DBLLIT          shift and go to state 35
    CHRLIT          shift and go to state 36
    STRLIT          shift and go to state 37
    TILDE           reduce using rule 23 (empty -> .)

    parameters                     shift and go to state 50
    type                           shift and go to state 51
    empty                          shift and go to state 52

state 30

    (1) main_program -> comienzo OPENCURLY statements CLOSECURLY . fin

    fin             shift and go to state 53


state 31

    (4) statements -> identifier_list EQ . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)

  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 54
    expression                     shift and go to state 55
    expression_list                shift and go to state 56
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 32

    (5) statements -> introducir type .

    CLOSECURLY      reduce using rule 5 (statements -> introducir type .)
    introducir      reduce using rule 5 (statements -> introducir type .)
    imprimir        reduce using rule 5 (statements -> introducir type .)
    regresso        reduce using rule 5 (statements -> introducir type .)
    si              reduce using rule 5 (statements -> introducir type .)
    COMMENT         reduce using rule 5 (statements -> introducir type .)
    VAR             reduce using rule 5 (statements -> introducir type .)
    CHRLIT          reduce using rule 5 (statements -> introducir type .)
    STRLIT          reduce using rule 5 (statements -> introducir type .)
    INTLIT          reduce using rule 5 (statements -> introducir type .)
    UNDERSCORE      reduce using rule 5 (statements -> introducir type .)
    mientras        reduce using rule 5 (statements -> introducir type .)
    EQ              reduce using rule 5 (statements -> introducir type .)
    otro            reduce using rule 5 (statements -> introducir type .)
    TILDE           reduce using rule 5 (statements -> introducir type .)


state 33

    (45) type -> INTLIT . identifier_list TILDE
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    TILDE           reduce using rule 23 (empty -> .)

    identifier_list                shift and go to state 60
    empty                          shift and go to state 43

state 34

    (46) type -> FLTLIT . identifier_list TILDE
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    TILDE           reduce using rule 23 (empty -> .)

    identifier_list                shift and go to state 61
    empty                          shift and go to state 43

state 35

    (47) type -> DBLLIT . identifier_list TILDE
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    TILDE           reduce using rule 23 (empty -> .)

    identifier_list                shift and go to state 62
    empty                          shift and go to state 43

state 36

    (48) type -> CHRLIT . identifier_list TILDE
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    TILDE           reduce using rule 23 (empty -> .)

    identifier_list                shift and go to state 63
    empty                          shift and go to state 43

state 37

    (49) type -> STRLIT . identifier_list TILDE
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    TILDE           reduce using rule 23 (empty -> .)

    identifier_list                shift and go to state 64
    empty                          shift and go to state 43

state 38

    (6) statements -> imprimir OPENPAR . identifier_list CLOSEPAR
    (14) statements -> imprimir OPENPAR . expression CLOSEPAR
    (15) statements -> imprimir OPENPAR . STRLIT CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (23) empty -> .
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression

    STRLIT          shift and go to state 67
    CHRLIT          shift and go to state 20
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    CLOSEPAR        reduce using rule 23 (empty -> .)
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    NOT             shift and go to state 59

    identifier_list                shift and go to state 65
    expression                     shift and go to state 66
    empty                          shift and go to state 43
    expression_list                shift and go to state 56
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58

state 39

    (7) statements -> imprimir QUOTATION . identifier_list QUOTATION
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    QUOTATION       reduce using rule 23 (empty -> .)

    identifier_list                shift and go to state 68
    empty                          shift and go to state 43

state 40

    (8) statements -> regresso OPENPAR . expression_list CLOSEPAR
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    NOT             shift and go to state 59
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)

    expression_list                shift and go to state 69
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    expression                     shift and go to state 70
    identifier_list                shift and go to state 54
    empty                          shift and go to state 43

state 41

    (9) statements -> si OPENPAR . expression_list CLOSEPAR otro statements
    (54) if -> si OPENPAR . expression_list CLOSEPAR statements
    (55) if -> si OPENPAR . expression_list CLOSEPAR statements else_if
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    NOT             shift and go to state 59
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)

    expression_list                shift and go to state 71
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    expression                     shift and go to state 70
    identifier_list                shift and go to state 54
    empty                          shift and go to state 43

state 42

    (19) identifier_list -> STRLIT identifier_list .

    EQ              reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    introducir      reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    imprimir        reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    regresso        reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    si              reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    COMMENT         reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    VAR             reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    CHRLIT          reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    STRLIT          reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    INTLIT          reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    UNDERSCORE      reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    mientras        reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    CLOSECURLY      reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    <               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    >               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    LT              reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    GT              reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    =               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    NEQ             reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    !               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    OR              reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    AND             reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    +               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    -               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    *               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    /               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    %               reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    otro            reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    TILDE           reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    CLOSEPAR        reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    QUOTATION       reduce using rule 19 (identifier_list -> STRLIT identifier_list .)
    COMMA           reduce using rule 19 (identifier_list -> STRLIT identifier_list .)


state 43

    (22) identifier_list -> empty .

    EQ              reduce using rule 22 (identifier_list -> empty .)
    introducir      reduce using rule 22 (identifier_list -> empty .)
    imprimir        reduce using rule 22 (identifier_list -> empty .)
    regresso        reduce using rule 22 (identifier_list -> empty .)
    si              reduce using rule 22 (identifier_list -> empty .)
    COMMENT         reduce using rule 22 (identifier_list -> empty .)
    VAR             reduce using rule 22 (identifier_list -> empty .)
    CHRLIT          reduce using rule 22 (identifier_list -> empty .)
    STRLIT          reduce using rule 22 (identifier_list -> empty .)
    INTLIT          reduce using rule 22 (identifier_list -> empty .)
    UNDERSCORE      reduce using rule 22 (identifier_list -> empty .)
    mientras        reduce using rule 22 (identifier_list -> empty .)
    CLOSECURLY      reduce using rule 22 (identifier_list -> empty .)
    <               reduce using rule 22 (identifier_list -> empty .)
    >               reduce using rule 22 (identifier_list -> empty .)
    LT              reduce using rule 22 (identifier_list -> empty .)
    GT              reduce using rule 22 (identifier_list -> empty .)
    =               reduce using rule 22 (identifier_list -> empty .)
    NEQ             reduce using rule 22 (identifier_list -> empty .)
    !               reduce using rule 22 (identifier_list -> empty .)
    OR              reduce using rule 22 (identifier_list -> empty .)
    AND             reduce using rule 22 (identifier_list -> empty .)
    +               reduce using rule 22 (identifier_list -> empty .)
    -               reduce using rule 22 (identifier_list -> empty .)
    *               reduce using rule 22 (identifier_list -> empty .)
    /               reduce using rule 22 (identifier_list -> empty .)
    %               reduce using rule 22 (identifier_list -> empty .)
    otro            reduce using rule 22 (identifier_list -> empty .)
    TILDE           reduce using rule 22 (identifier_list -> empty .)
    CLOSEPAR        reduce using rule 22 (identifier_list -> empty .)
    QUOTATION       reduce using rule 22 (identifier_list -> empty .)
    COMMA           reduce using rule 22 (identifier_list -> empty .)


state 44

    (16) statements -> VAR ASSIGN . expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> VAR ASSIGN . STRLIT imprimir OPENPAR VAR CLOSEPAR
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    STRLIT          shift and go to state 73
    CHRLIT          shift and go to state 20
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    imprimir        reduce using rule 23 (empty -> .)
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)

    expression                     shift and go to state 72
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 45

    (18) identifier_list -> CHRLIT identifier_list .

    EQ              reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    introducir      reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    imprimir        reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    regresso        reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    si              reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    COMMENT         reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    VAR             reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    CHRLIT          reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    STRLIT          reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    INTLIT          reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    UNDERSCORE      reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    mientras        reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    CLOSECURLY      reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    <               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    >               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    LT              reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    GT              reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    =               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    NEQ             reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    !               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    OR              reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    AND             reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    +               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    -               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    *               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    /               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    %               reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    otro            reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    TILDE           reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    CLOSEPAR        reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    QUOTATION       reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)
    COMMA           reduce using rule 18 (identifier_list -> CHRLIT identifier_list .)


state 46

    (20) identifier_list -> INTLIT identifier_list .

    EQ              reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    introducir      reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    imprimir        reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    regresso        reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    si              reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    COMMENT         reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    VAR             reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    CHRLIT          reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    STRLIT          reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    INTLIT          reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    UNDERSCORE      reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    mientras        reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    CLOSECURLY      reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    <               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    >               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    LT              reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    GT              reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    =               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    NEQ             reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    !               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    OR              reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    AND             reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    +               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    -               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    *               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    /               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    %               reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    otro            reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    TILDE           reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    CLOSEPAR        reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    QUOTATION       reduce using rule 20 (identifier_list -> INTLIT identifier_list .)
    COMMA           reduce using rule 20 (identifier_list -> INTLIT identifier_list .)


state 47

    (53) statement_list -> statement_list statements .
    (52) statement_list -> statements .

  ! reduce/reduce conflict for CLOSECURLY resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for introducir resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for imprimir resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for regresso resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for si resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for COMMENT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for VAR resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for CHRLIT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for STRLIT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for INTLIT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for UNDERSCORE resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for mientras resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for EQ resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for otro resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for TILDE resolved using rule 52 (statement_list -> statements .)
    CLOSECURLY      reduce using rule 52 (statement_list -> statements .)
    introducir      reduce using rule 52 (statement_list -> statements .)
    imprimir        reduce using rule 52 (statement_list -> statements .)
    regresso        reduce using rule 52 (statement_list -> statements .)
    si              reduce using rule 52 (statement_list -> statements .)
    COMMENT         reduce using rule 52 (statement_list -> statements .)
    VAR             reduce using rule 52 (statement_list -> statements .)
    CHRLIT          reduce using rule 52 (statement_list -> statements .)
    STRLIT          reduce using rule 52 (statement_list -> statements .)
    INTLIT          reduce using rule 52 (statement_list -> statements .)
    UNDERSCORE      reduce using rule 52 (statement_list -> statements .)
    mientras        reduce using rule 52 (statement_list -> statements .)
    EQ              reduce using rule 52 (statement_list -> statements .)
    otro            reduce using rule 52 (statement_list -> statements .)
    TILDE           reduce using rule 52 (statement_list -> statements .)

  ! CLOSECURLY      [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! introducir      [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! imprimir        [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! regresso        [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! si              [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! COMMENT         [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! VAR             [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! CHRLIT          [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! STRLIT          [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! INTLIT          [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! UNDERSCORE      [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! mientras        [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! EQ              [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! otro            [ reduce using rule 53 (statement_list -> statement_list statements .) ]
  ! TILDE           [ reduce using rule 53 (statement_list -> statement_list statements .) ]


state 48

    (58) while -> mientras OPENPAR . expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> mientras OPENPAR . expression_list CLOSEPAR TILDE optional_statements TILDE romperse
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

    NOT             shift and go to state 59
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)

    expression_list                shift and go to state 74
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    expression                     shift and go to state 70
    identifier_list                shift and go to state 54
    empty                          shift and go to state 43

state 49

    (60) classes -> clase OPENCURLY identifier_list . optional_statements CLOSECURLY
    (50) optional_statements -> . statement_list
    (51) optional_statements -> . empty
    (52) statement_list -> . statements
    (53) statement_list -> . statement_list statements
    (23) empty -> .
    (4) statements -> . identifier_list EQ expression
    (5) statements -> . introducir type
    (6) statements -> . imprimir OPENPAR identifier_list CLOSEPAR
    (7) statements -> . imprimir QUOTATION identifier_list QUOTATION
    (8) statements -> . regresso OPENPAR expression_list CLOSEPAR
    (9) statements -> . si OPENPAR expression_list CLOSEPAR otro statements
    (10) statements -> . optional_statements
    (11) statements -> . if
    (12) statements -> . while
    (13) statements -> . COMMENT
    (14) statements -> . imprimir OPENPAR expression CLOSEPAR
    (15) statements -> . imprimir OPENPAR STRLIT CLOSEPAR
    (16) statements -> . VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> . VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (54) if -> . si OPENPAR expression_list CLOSEPAR statements
    (55) if -> . si OPENPAR expression_list CLOSEPAR statements else_if
    (58) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse

  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
    EQ              reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    introducir      shift and go to state 10
    imprimir        shift and go to state 11
    regresso        shift and go to state 12
    si              shift and go to state 13
    COMMENT         shift and go to state 17
    VAR             shift and go to state 19
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    mientras        shift and go to state 25

  ! introducir      [ reduce using rule 23 (empty -> .) ]
  ! imprimir        [ reduce using rule 23 (empty -> .) ]
  ! regresso        [ reduce using rule 23 (empty -> .) ]
  ! si              [ reduce using rule 23 (empty -> .) ]
  ! COMMENT         [ reduce using rule 23 (empty -> .) ]
  ! VAR             [ reduce using rule 23 (empty -> .) ]
  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]
  ! mientras        [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 9
    optional_statements            shift and go to state 75
    statement_list                 shift and go to state 24
    empty                          shift and go to state 76
    statements                     shift and go to state 77
    if                             shift and go to state 15
    while                          shift and go to state 16

state 50

    (61) function_heading -> explicar OPENPAR parameters . TILDE CLOSEPAR

    TILDE           shift and go to state 78


state 51

    (62) parameters -> type .
    (63) parameters -> type . COMMA parameters

    TILDE           reduce using rule 62 (parameters -> type .)
    COMMA           shift and go to state 79


state 52

    (64) parameters -> empty .

    TILDE           reduce using rule 64 (parameters -> empty .)


state 53

    (1) main_program -> comienzo OPENCURLY statements CLOSECURLY fin .

    $end            reduce using rule 1 (main_program -> comienzo OPENCURLY statements CLOSECURLY fin .)


state 54

    (26) expression -> identifier_list .

    <               reduce using rule 26 (expression -> identifier_list .)
    >               reduce using rule 26 (expression -> identifier_list .)
    LT              reduce using rule 26 (expression -> identifier_list .)
    GT              reduce using rule 26 (expression -> identifier_list .)
    =               reduce using rule 26 (expression -> identifier_list .)
    NEQ             reduce using rule 26 (expression -> identifier_list .)
    EQ              reduce using rule 26 (expression -> identifier_list .)
    !               reduce using rule 26 (expression -> identifier_list .)
    OR              reduce using rule 26 (expression -> identifier_list .)
    AND             reduce using rule 26 (expression -> identifier_list .)
    +               reduce using rule 26 (expression -> identifier_list .)
    -               reduce using rule 26 (expression -> identifier_list .)
    *               reduce using rule 26 (expression -> identifier_list .)
    /               reduce using rule 26 (expression -> identifier_list .)
    %               reduce using rule 26 (expression -> identifier_list .)
    CLOSECURLY      reduce using rule 26 (expression -> identifier_list .)
    introducir      reduce using rule 26 (expression -> identifier_list .)
    imprimir        reduce using rule 26 (expression -> identifier_list .)
    regresso        reduce using rule 26 (expression -> identifier_list .)
    si              reduce using rule 26 (expression -> identifier_list .)
    COMMENT         reduce using rule 26 (expression -> identifier_list .)
    VAR             reduce using rule 26 (expression -> identifier_list .)
    CHRLIT          reduce using rule 26 (expression -> identifier_list .)
    STRLIT          reduce using rule 26 (expression -> identifier_list .)
    INTLIT          reduce using rule 26 (expression -> identifier_list .)
    UNDERSCORE      reduce using rule 26 (expression -> identifier_list .)
    mientras        reduce using rule 26 (expression -> identifier_list .)
    otro            reduce using rule 26 (expression -> identifier_list .)
    TILDE           reduce using rule 26 (expression -> identifier_list .)
    COMMA           reduce using rule 26 (expression -> identifier_list .)
    CLOSEPAR        reduce using rule 26 (expression -> identifier_list .)


state 55

    (4) statements -> identifier_list EQ expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for EQ resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for CLOSECURLY resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for introducir resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for imprimir resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for regresso resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for si resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for COMMENT resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for VAR resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for CHRLIT resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for STRLIT resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for INTLIT resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for UNDERSCORE resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for mientras resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for otro resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! reduce/reduce conflict for TILDE resolved using rule 4 (statements -> identifier_list EQ expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    CLOSECURLY      reduce using rule 4 (statements -> identifier_list EQ expression .)
    introducir      reduce using rule 4 (statements -> identifier_list EQ expression .)
    imprimir        reduce using rule 4 (statements -> identifier_list EQ expression .)
    regresso        reduce using rule 4 (statements -> identifier_list EQ expression .)
    si              reduce using rule 4 (statements -> identifier_list EQ expression .)
    COMMENT         reduce using rule 4 (statements -> identifier_list EQ expression .)
    VAR             reduce using rule 4 (statements -> identifier_list EQ expression .)
    CHRLIT          reduce using rule 4 (statements -> identifier_list EQ expression .)
    STRLIT          reduce using rule 4 (statements -> identifier_list EQ expression .)
    INTLIT          reduce using rule 4 (statements -> identifier_list EQ expression .)
    UNDERSCORE      reduce using rule 4 (statements -> identifier_list EQ expression .)
    mientras        reduce using rule 4 (statements -> identifier_list EQ expression .)
    otro            reduce using rule 4 (statements -> identifier_list EQ expression .)
    TILDE           reduce using rule 4 (statements -> identifier_list EQ expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! EQ              [ reduce using rule 4 (statements -> identifier_list EQ expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]
  ! CLOSECURLY      [ reduce using rule 24 (expression -> expression .) ]
  ! introducir      [ reduce using rule 24 (expression -> expression .) ]
  ! imprimir        [ reduce using rule 24 (expression -> expression .) ]
  ! regresso        [ reduce using rule 24 (expression -> expression .) ]
  ! si              [ reduce using rule 24 (expression -> expression .) ]
  ! COMMENT         [ reduce using rule 24 (expression -> expression .) ]
  ! VAR             [ reduce using rule 24 (expression -> expression .) ]
  ! CHRLIT          [ reduce using rule 24 (expression -> expression .) ]
  ! STRLIT          [ reduce using rule 24 (expression -> expression .) ]
  ! INTLIT          [ reduce using rule 24 (expression -> expression .) ]
  ! UNDERSCORE      [ reduce using rule 24 (expression -> expression .) ]
  ! mientras        [ reduce using rule 24 (expression -> expression .) ]
  ! otro            [ reduce using rule 24 (expression -> expression .) ]
  ! TILDE           [ reduce using rule 24 (expression -> expression .) ]


state 56

    (25) expression -> expression_list . COMMA expression

    COMMA           shift and go to state 95


state 57

    (27) expression_list -> logical_expression .

    COMMA           reduce using rule 27 (expression_list -> logical_expression .)
    CLOSEPAR        reduce using rule 27 (expression_list -> logical_expression .)


state 58

    (28) expression_list -> arithmetic_expression .

    COMMA           reduce using rule 28 (expression_list -> arithmetic_expression .)
    CLOSEPAR        reduce using rule 28 (expression_list -> arithmetic_expression .)


state 59

    (39) logical_expression -> NOT . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 96
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 60

    (45) type -> INTLIT identifier_list . TILDE

    TILDE           shift and go to state 97


state 61

    (46) type -> FLTLIT identifier_list . TILDE

    TILDE           shift and go to state 98


state 62

    (47) type -> DBLLIT identifier_list . TILDE

    TILDE           shift and go to state 99


state 63

    (48) type -> CHRLIT identifier_list . TILDE

    TILDE           shift and go to state 100


state 64

    (49) type -> STRLIT identifier_list . TILDE

    TILDE           shift and go to state 101


state 65

    (6) statements -> imprimir OPENPAR identifier_list . CLOSEPAR
    (26) expression -> identifier_list .

  ! shift/reduce conflict for CLOSEPAR resolved as shift
    CLOSEPAR        shift and go to state 102
    <               reduce using rule 26 (expression -> identifier_list .)
    >               reduce using rule 26 (expression -> identifier_list .)
    LT              reduce using rule 26 (expression -> identifier_list .)
    GT              reduce using rule 26 (expression -> identifier_list .)
    =               reduce using rule 26 (expression -> identifier_list .)
    NEQ             reduce using rule 26 (expression -> identifier_list .)
    EQ              reduce using rule 26 (expression -> identifier_list .)
    !               reduce using rule 26 (expression -> identifier_list .)
    OR              reduce using rule 26 (expression -> identifier_list .)
    AND             reduce using rule 26 (expression -> identifier_list .)
    +               reduce using rule 26 (expression -> identifier_list .)
    -               reduce using rule 26 (expression -> identifier_list .)
    *               reduce using rule 26 (expression -> identifier_list .)
    /               reduce using rule 26 (expression -> identifier_list .)
    %               reduce using rule 26 (expression -> identifier_list .)

  ! CLOSEPAR        [ reduce using rule 26 (expression -> identifier_list .) ]


state 66

    (14) statements -> imprimir OPENPAR expression . CLOSEPAR
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! shift/reduce conflict for CLOSEPAR resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    CLOSEPAR        shift and go to state 103
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! CLOSEPAR        [ reduce using rule 24 (expression -> expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 67

    (15) statements -> imprimir OPENPAR STRLIT . CLOSEPAR
    (19) identifier_list -> STRLIT . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

  ! shift/reduce conflict for CLOSEPAR resolved as shift
    CLOSEPAR        shift and go to state 104
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)

  ! CLOSEPAR        [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 42
    empty                          shift and go to state 43

state 68

    (7) statements -> imprimir QUOTATION identifier_list . QUOTATION

    QUOTATION       shift and go to state 105


state 69

    (8) statements -> regresso OPENPAR expression_list . CLOSEPAR
    (25) expression -> expression_list . COMMA expression

    CLOSEPAR        shift and go to state 106
    COMMA           shift and go to state 95


state 70

    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression
    (24) expression -> expression .

  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 71

    (9) statements -> si OPENPAR expression_list . CLOSEPAR otro statements
    (54) if -> si OPENPAR expression_list . CLOSEPAR statements
    (55) if -> si OPENPAR expression_list . CLOSEPAR statements else_if
    (25) expression -> expression_list . COMMA expression

    CLOSEPAR        shift and go to state 107
    COMMA           shift and go to state 95


state 72

    (16) statements -> VAR ASSIGN expression . imprimir OPENPAR VAR CLOSEPAR
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    imprimir        shift and go to state 108
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! imprimir        [ reduce using rule 24 (expression -> expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 73

    (17) statements -> VAR ASSIGN STRLIT . imprimir OPENPAR VAR CLOSEPAR
    (19) identifier_list -> STRLIT . identifier_list
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (23) empty -> .

  ! shift/reduce conflict for imprimir resolved as shift
    imprimir        shift and go to state 109
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)

  ! imprimir        [ reduce using rule 23 (empty -> .) ]

    identifier_list                shift and go to state 42
    empty                          shift and go to state 43

state 74

    (58) while -> mientras OPENPAR expression_list . CLOSEPAR TILDE optional_statements TILDE
    (59) while -> mientras OPENPAR expression_list . CLOSEPAR TILDE optional_statements TILDE romperse
    (25) expression -> expression_list . COMMA expression

    CLOSEPAR        shift and go to state 110
    COMMA           shift and go to state 95


state 75

    (60) classes -> clase OPENCURLY identifier_list optional_statements . CLOSECURLY
    (10) statements -> optional_statements .

  ! shift/reduce conflict for CLOSECURLY resolved as shift
    CLOSECURLY      shift and go to state 111
    introducir      reduce using rule 10 (statements -> optional_statements .)
    imprimir        reduce using rule 10 (statements -> optional_statements .)
    regresso        reduce using rule 10 (statements -> optional_statements .)
    si              reduce using rule 10 (statements -> optional_statements .)
    COMMENT         reduce using rule 10 (statements -> optional_statements .)
    VAR             reduce using rule 10 (statements -> optional_statements .)
    CHRLIT          reduce using rule 10 (statements -> optional_statements .)
    STRLIT          reduce using rule 10 (statements -> optional_statements .)
    INTLIT          reduce using rule 10 (statements -> optional_statements .)
    UNDERSCORE      reduce using rule 10 (statements -> optional_statements .)
    mientras        reduce using rule 10 (statements -> optional_statements .)
    EQ              reduce using rule 10 (statements -> optional_statements .)

  ! CLOSECURLY      [ reduce using rule 10 (statements -> optional_statements .) ]


state 76

    (51) optional_statements -> empty .
    (22) identifier_list -> empty .

  ! reduce/reduce conflict for EQ resolved using rule 22 (identifier_list -> empty .)
    introducir      reduce using rule 51 (optional_statements -> empty .)
    imprimir        reduce using rule 51 (optional_statements -> empty .)
    regresso        reduce using rule 51 (optional_statements -> empty .)
    si              reduce using rule 51 (optional_statements -> empty .)
    COMMENT         reduce using rule 51 (optional_statements -> empty .)
    VAR             reduce using rule 51 (optional_statements -> empty .)
    CHRLIT          reduce using rule 51 (optional_statements -> empty .)
    STRLIT          reduce using rule 51 (optional_statements -> empty .)
    INTLIT          reduce using rule 51 (optional_statements -> empty .)
    UNDERSCORE      reduce using rule 51 (optional_statements -> empty .)
    mientras        reduce using rule 51 (optional_statements -> empty .)
    CLOSECURLY      reduce using rule 51 (optional_statements -> empty .)
    TILDE           reduce using rule 51 (optional_statements -> empty .)
    EQ              reduce using rule 22 (identifier_list -> empty .)

  ! EQ              [ reduce using rule 51 (optional_statements -> empty .) ]


state 77

    (52) statement_list -> statements .

    introducir      reduce using rule 52 (statement_list -> statements .)
    imprimir        reduce using rule 52 (statement_list -> statements .)
    regresso        reduce using rule 52 (statement_list -> statements .)
    si              reduce using rule 52 (statement_list -> statements .)
    COMMENT         reduce using rule 52 (statement_list -> statements .)
    VAR             reduce using rule 52 (statement_list -> statements .)
    CHRLIT          reduce using rule 52 (statement_list -> statements .)
    STRLIT          reduce using rule 52 (statement_list -> statements .)
    INTLIT          reduce using rule 52 (statement_list -> statements .)
    UNDERSCORE      reduce using rule 52 (statement_list -> statements .)
    mientras        reduce using rule 52 (statement_list -> statements .)
    EQ              reduce using rule 52 (statement_list -> statements .)
    CLOSECURLY      reduce using rule 52 (statement_list -> statements .)
    TILDE           reduce using rule 52 (statement_list -> statements .)


state 78

    (61) function_heading -> explicar OPENPAR parameters TILDE . CLOSEPAR

    CLOSEPAR        shift and go to state 112


state 79

    (63) parameters -> type COMMA . parameters
    (62) parameters -> . type
    (63) parameters -> . type COMMA parameters
    (64) parameters -> . empty
    (45) type -> . INTLIT identifier_list TILDE
    (46) type -> . FLTLIT identifier_list TILDE
    (47) type -> . DBLLIT identifier_list TILDE
    (48) type -> . CHRLIT identifier_list TILDE
    (49) type -> . STRLIT identifier_list TILDE
    (23) empty -> .

    INTLIT          shift and go to state 33
    FLTLIT          shift and go to state 34
    DBLLIT          shift and go to state 35
    CHRLIT          shift and go to state 36
    STRLIT          shift and go to state 37
    TILDE           reduce using rule 23 (empty -> .)

    type                           shift and go to state 51
    parameters                     shift and go to state 113
    empty                          shift and go to state 52

state 80

    (35) logical_expression -> expression EQ . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 114
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 81

    (29) logical_expression -> expression < . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 115
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 82

    (30) logical_expression -> expression > . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 116
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 83

    (31) logical_expression -> expression LT . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 117
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 84

    (32) logical_expression -> expression GT . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 118
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 85

    (33) logical_expression -> expression = . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 119
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 86

    (34) logical_expression -> expression NEQ . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 120
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 87

    (36) logical_expression -> expression ! . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 121
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 88

    (37) logical_expression -> expression OR . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 122
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 89

    (38) logical_expression -> expression AND . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 123
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 90

    (40) arithmetic_expression -> expression + . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 124
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 91

    (41) arithmetic_expression -> expression - . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 125
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 92

    (42) arithmetic_expression -> expression * . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 126
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 93

    (43) arithmetic_expression -> expression / . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 127
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 94

    (44) arithmetic_expression -> expression % . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)

    expression                     shift and go to state 128
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 95

    (25) expression -> expression_list COMMA . expression
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)
    CLOSEPAR        reduce using rule 23 (empty -> .)
    COMMA           reduce using rule 23 (empty -> .)

  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]

    expression_list                shift and go to state 56
    expression                     shift and go to state 129
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 96

    (39) logical_expression -> NOT expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 39 (logical_expression -> NOT expression .) ]
  ! CLOSEPAR        [ reduce using rule 39 (logical_expression -> NOT expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 97

    (45) type -> INTLIT identifier_list TILDE .

    CLOSECURLY      reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    introducir      reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    imprimir        reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    regresso        reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    si              reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    COMMENT         reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    VAR             reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    CHRLIT          reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    STRLIT          reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    INTLIT          reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    UNDERSCORE      reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    mientras        reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    EQ              reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    otro            reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    TILDE           reduce using rule 45 (type -> INTLIT identifier_list TILDE .)
    COMMA           reduce using rule 45 (type -> INTLIT identifier_list TILDE .)


state 98

    (46) type -> FLTLIT identifier_list TILDE .

    CLOSECURLY      reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    introducir      reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    imprimir        reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    regresso        reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    si              reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    COMMENT         reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    VAR             reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    CHRLIT          reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    STRLIT          reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    INTLIT          reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    UNDERSCORE      reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    mientras        reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    EQ              reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    otro            reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    TILDE           reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)
    COMMA           reduce using rule 46 (type -> FLTLIT identifier_list TILDE .)


state 99

    (47) type -> DBLLIT identifier_list TILDE .

    CLOSECURLY      reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    introducir      reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    imprimir        reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    regresso        reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    si              reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    COMMENT         reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    VAR             reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    CHRLIT          reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    STRLIT          reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    INTLIT          reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    UNDERSCORE      reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    mientras        reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    EQ              reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    otro            reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    TILDE           reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)
    COMMA           reduce using rule 47 (type -> DBLLIT identifier_list TILDE .)


state 100

    (48) type -> CHRLIT identifier_list TILDE .

    CLOSECURLY      reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    introducir      reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    imprimir        reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    regresso        reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    si              reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    COMMENT         reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    VAR             reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    CHRLIT          reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    STRLIT          reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    INTLIT          reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    UNDERSCORE      reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    mientras        reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    EQ              reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    otro            reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    TILDE           reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)
    COMMA           reduce using rule 48 (type -> CHRLIT identifier_list TILDE .)


state 101

    (49) type -> STRLIT identifier_list TILDE .

    CLOSECURLY      reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    introducir      reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    imprimir        reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    regresso        reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    si              reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    COMMENT         reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    VAR             reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    CHRLIT          reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    STRLIT          reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    INTLIT          reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    UNDERSCORE      reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    mientras        reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    EQ              reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    otro            reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    TILDE           reduce using rule 49 (type -> STRLIT identifier_list TILDE .)
    COMMA           reduce using rule 49 (type -> STRLIT identifier_list TILDE .)


state 102

    (6) statements -> imprimir OPENPAR identifier_list CLOSEPAR .

    CLOSECURLY      reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    introducir      reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    imprimir        reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    regresso        reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    si              reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    COMMENT         reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    VAR             reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    CHRLIT          reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    STRLIT          reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    INTLIT          reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    UNDERSCORE      reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    mientras        reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    EQ              reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    otro            reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)
    TILDE           reduce using rule 6 (statements -> imprimir OPENPAR identifier_list CLOSEPAR .)


state 103

    (14) statements -> imprimir OPENPAR expression CLOSEPAR .

    CLOSECURLY      reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    introducir      reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    imprimir        reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    regresso        reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    si              reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    COMMENT         reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    VAR             reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    CHRLIT          reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    STRLIT          reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    INTLIT          reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    UNDERSCORE      reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    mientras        reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    EQ              reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    otro            reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)
    TILDE           reduce using rule 14 (statements -> imprimir OPENPAR expression CLOSEPAR .)


state 104

    (15) statements -> imprimir OPENPAR STRLIT CLOSEPAR .

    CLOSECURLY      reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    introducir      reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    imprimir        reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    regresso        reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    si              reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    COMMENT         reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    VAR             reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    CHRLIT          reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    STRLIT          reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    INTLIT          reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    UNDERSCORE      reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    mientras        reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    EQ              reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    otro            reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)
    TILDE           reduce using rule 15 (statements -> imprimir OPENPAR STRLIT CLOSEPAR .)


state 105

    (7) statements -> imprimir QUOTATION identifier_list QUOTATION .

    CLOSECURLY      reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    introducir      reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    imprimir        reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    regresso        reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    si              reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    COMMENT         reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    VAR             reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    CHRLIT          reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    STRLIT          reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    INTLIT          reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    UNDERSCORE      reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    mientras        reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    EQ              reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    otro            reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)
    TILDE           reduce using rule 7 (statements -> imprimir QUOTATION identifier_list QUOTATION .)


state 106

    (8) statements -> regresso OPENPAR expression_list CLOSEPAR .

    CLOSECURLY      reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    introducir      reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    imprimir        reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    regresso        reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    si              reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    COMMENT         reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    VAR             reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    CHRLIT          reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    STRLIT          reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    INTLIT          reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    UNDERSCORE      reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    mientras        reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    EQ              reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    otro            reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)
    TILDE           reduce using rule 8 (statements -> regresso OPENPAR expression_list CLOSEPAR .)


state 107

    (9) statements -> si OPENPAR expression_list CLOSEPAR . otro statements
    (54) if -> si OPENPAR expression_list CLOSEPAR . statements
    (55) if -> si OPENPAR expression_list CLOSEPAR . statements else_if
    (4) statements -> . identifier_list EQ expression
    (5) statements -> . introducir type
    (6) statements -> . imprimir OPENPAR identifier_list CLOSEPAR
    (7) statements -> . imprimir QUOTATION identifier_list QUOTATION
    (8) statements -> . regresso OPENPAR expression_list CLOSEPAR
    (9) statements -> . si OPENPAR expression_list CLOSEPAR otro statements
    (10) statements -> . optional_statements
    (11) statements -> . if
    (12) statements -> . while
    (13) statements -> . COMMENT
    (14) statements -> . imprimir OPENPAR expression CLOSEPAR
    (15) statements -> . imprimir OPENPAR STRLIT CLOSEPAR
    (16) statements -> . VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> . VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (50) optional_statements -> . statement_list
    (51) optional_statements -> . empty
    (54) if -> . si OPENPAR expression_list CLOSEPAR statements
    (55) if -> . si OPENPAR expression_list CLOSEPAR statements else_if
    (58) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse
    (23) empty -> .
    (52) statement_list -> . statements
    (53) statement_list -> . statement_list statements

  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
  ! shift/reduce conflict for otro resolved as shift
    otro            shift and go to state 130
    introducir      shift and go to state 10
    imprimir        shift and go to state 11
    regresso        shift and go to state 12
    si              shift and go to state 13
    COMMENT         shift and go to state 17
    VAR             shift and go to state 19
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    mientras        shift and go to state 25
    EQ              reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)

  ! introducir      [ reduce using rule 23 (empty -> .) ]
  ! imprimir        [ reduce using rule 23 (empty -> .) ]
  ! regresso        [ reduce using rule 23 (empty -> .) ]
  ! si              [ reduce using rule 23 (empty -> .) ]
  ! COMMENT         [ reduce using rule 23 (empty -> .) ]
  ! VAR             [ reduce using rule 23 (empty -> .) ]
  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]
  ! mientras        [ reduce using rule 23 (empty -> .) ]
  ! otro            [ reduce using rule 23 (empty -> .) ]

    statements                     shift and go to state 131
    identifier_list                shift and go to state 9
    optional_statements            shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    empty                          shift and go to state 23
    statement_list                 shift and go to state 24

state 108

    (16) statements -> VAR ASSIGN expression imprimir . OPENPAR VAR CLOSEPAR

    OPENPAR         shift and go to state 132


state 109

    (17) statements -> VAR ASSIGN STRLIT imprimir . OPENPAR VAR CLOSEPAR

    OPENPAR         shift and go to state 133


state 110

    (58) while -> mientras OPENPAR expression_list CLOSEPAR . TILDE optional_statements TILDE
    (59) while -> mientras OPENPAR expression_list CLOSEPAR . TILDE optional_statements TILDE romperse

    TILDE           shift and go to state 134


state 111

    (60) classes -> clase OPENCURLY identifier_list optional_statements CLOSECURLY .

    fin             reduce using rule 60 (classes -> clase OPENCURLY identifier_list optional_statements CLOSECURLY .)


state 112

    (61) function_heading -> explicar OPENPAR parameters TILDE CLOSEPAR .

    fin             reduce using rule 61 (function_heading -> explicar OPENPAR parameters TILDE CLOSEPAR .)


state 113

    (63) parameters -> type COMMA parameters .

    TILDE           reduce using rule 63 (parameters -> type COMMA parameters .)


state 114

    (35) logical_expression -> expression EQ expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 35 (logical_expression -> expression EQ expression .) ]
  ! CLOSEPAR        [ reduce using rule 35 (logical_expression -> expression EQ expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 115

    (29) logical_expression -> expression < expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 29 (logical_expression -> expression < expression .) ]
  ! CLOSEPAR        [ reduce using rule 29 (logical_expression -> expression < expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 116

    (30) logical_expression -> expression > expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 30 (logical_expression -> expression > expression .) ]
  ! CLOSEPAR        [ reduce using rule 30 (logical_expression -> expression > expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 117

    (31) logical_expression -> expression LT expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 31 (logical_expression -> expression LT expression .) ]
  ! CLOSEPAR        [ reduce using rule 31 (logical_expression -> expression LT expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 118

    (32) logical_expression -> expression GT expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 32 (logical_expression -> expression GT expression .) ]
  ! CLOSEPAR        [ reduce using rule 32 (logical_expression -> expression GT expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 119

    (33) logical_expression -> expression = expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 33 (logical_expression -> expression = expression .) ]
  ! CLOSEPAR        [ reduce using rule 33 (logical_expression -> expression = expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 120

    (34) logical_expression -> expression NEQ expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 34 (logical_expression -> expression NEQ expression .) ]
  ! CLOSEPAR        [ reduce using rule 34 (logical_expression -> expression NEQ expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 121

    (36) logical_expression -> expression ! expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 36 (logical_expression -> expression ! expression .) ]
  ! CLOSEPAR        [ reduce using rule 36 (logical_expression -> expression ! expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 122

    (37) logical_expression -> expression OR expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 37 (logical_expression -> expression OR expression .) ]
  ! CLOSEPAR        [ reduce using rule 37 (logical_expression -> expression OR expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 123

    (38) logical_expression -> expression AND expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 38 (logical_expression -> expression AND expression .) ]
  ! CLOSEPAR        [ reduce using rule 38 (logical_expression -> expression AND expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 124

    (40) arithmetic_expression -> expression + expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 40 (arithmetic_expression -> expression + expression .) ]
  ! CLOSEPAR        [ reduce using rule 40 (arithmetic_expression -> expression + expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 125

    (41) arithmetic_expression -> expression - expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 41 (arithmetic_expression -> expression - expression .) ]
  ! CLOSEPAR        [ reduce using rule 41 (arithmetic_expression -> expression - expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 126

    (42) arithmetic_expression -> expression * expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 42 (arithmetic_expression -> expression * expression .) ]
  ! CLOSEPAR        [ reduce using rule 42 (arithmetic_expression -> expression * expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 127

    (43) arithmetic_expression -> expression / expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 43 (arithmetic_expression -> expression / expression .) ]
  ! CLOSEPAR        [ reduce using rule 43 (arithmetic_expression -> expression / expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 128

    (44) arithmetic_expression -> expression % expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    COMMA           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! COMMA           [ reduce using rule 44 (arithmetic_expression -> expression % expression .) ]
  ! CLOSEPAR        [ reduce using rule 44 (arithmetic_expression -> expression % expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 129

    (25) expression -> expression_list COMMA expression .
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! reduce/reduce conflict for < resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for > resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for LT resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for GT resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for = resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for NEQ resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for EQ resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for ! resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for OR resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for AND resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for + resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for - resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for * resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for / resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for % resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSECURLY resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for introducir resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for imprimir resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for regresso resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for si resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for COMMENT resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for VAR resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CHRLIT resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for STRLIT resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for INTLIT resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for UNDERSCORE resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for mientras resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for otro resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for TILDE resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for CLOSEPAR resolved using rule 24 (expression -> expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 24 (expression -> expression .)
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    CLOSECURLY      reduce using rule 24 (expression -> expression .)
    introducir      reduce using rule 24 (expression -> expression .)
    imprimir        reduce using rule 24 (expression -> expression .)
    regresso        reduce using rule 24 (expression -> expression .)
    si              reduce using rule 24 (expression -> expression .)
    COMMENT         reduce using rule 24 (expression -> expression .)
    VAR             reduce using rule 24 (expression -> expression .)
    CHRLIT          reduce using rule 24 (expression -> expression .)
    STRLIT          reduce using rule 24 (expression -> expression .)
    INTLIT          reduce using rule 24 (expression -> expression .)
    UNDERSCORE      reduce using rule 24 (expression -> expression .)
    mientras        reduce using rule 24 (expression -> expression .)
    otro            reduce using rule 24 (expression -> expression .)
    TILDE           reduce using rule 24 (expression -> expression .)
    CLOSEPAR        reduce using rule 24 (expression -> expression .)
    COMMA           reduce using rule 24 (expression -> expression .)
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! <               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! >               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! LT              [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! GT              [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! =               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! NEQ             [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! EQ              [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! !               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! OR              [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! AND             [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! +               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! %               [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! CLOSECURLY      [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! introducir      [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! imprimir        [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! regresso        [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! si              [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! COMMENT         [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! VAR             [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! CHRLIT          [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! STRLIT          [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! INTLIT          [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! UNDERSCORE      [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! mientras        [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! otro            [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! TILDE           [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! CLOSEPAR        [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! COMMA           [ reduce using rule 25 (expression -> expression_list COMMA expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 130

    (9) statements -> si OPENPAR expression_list CLOSEPAR otro . statements
    (4) statements -> . identifier_list EQ expression
    (5) statements -> . introducir type
    (6) statements -> . imprimir OPENPAR identifier_list CLOSEPAR
    (7) statements -> . imprimir QUOTATION identifier_list QUOTATION
    (8) statements -> . regresso OPENPAR expression_list CLOSEPAR
    (9) statements -> . si OPENPAR expression_list CLOSEPAR otro statements
    (10) statements -> . optional_statements
    (11) statements -> . if
    (12) statements -> . while
    (13) statements -> . COMMENT
    (14) statements -> . imprimir OPENPAR expression CLOSEPAR
    (15) statements -> . imprimir OPENPAR STRLIT CLOSEPAR
    (16) statements -> . VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> . VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (50) optional_statements -> . statement_list
    (51) optional_statements -> . empty
    (54) if -> . si OPENPAR expression_list CLOSEPAR statements
    (55) if -> . si OPENPAR expression_list CLOSEPAR statements else_if
    (58) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse
    (23) empty -> .
    (52) statement_list -> . statements
    (53) statement_list -> . statement_list statements

  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
    introducir      shift and go to state 10
    imprimir        shift and go to state 11
    regresso        shift and go to state 12
    si              shift and go to state 13
    COMMENT         shift and go to state 17
    VAR             shift and go to state 19
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    mientras        shift and go to state 25
    EQ              reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)

  ! introducir      [ reduce using rule 23 (empty -> .) ]
  ! imprimir        [ reduce using rule 23 (empty -> .) ]
  ! regresso        [ reduce using rule 23 (empty -> .) ]
  ! si              [ reduce using rule 23 (empty -> .) ]
  ! COMMENT         [ reduce using rule 23 (empty -> .) ]
  ! VAR             [ reduce using rule 23 (empty -> .) ]
  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]
  ! mientras        [ reduce using rule 23 (empty -> .) ]

    statements                     shift and go to state 135
    identifier_list                shift and go to state 9
    optional_statements            shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    empty                          shift and go to state 23
    statement_list                 shift and go to state 24

state 131

    (54) if -> si OPENPAR expression_list CLOSEPAR statements .
    (55) if -> si OPENPAR expression_list CLOSEPAR statements . else_if
    (52) statement_list -> statements .
    (56) else_if -> . otro OPENPAR expression CLOSEPAR statements else_if
    (57) else_if -> . empty
    (23) empty -> .

  ! reduce/reduce conflict for CLOSECURLY resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for introducir resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for imprimir resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for regresso resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for si resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for COMMENT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for VAR resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for CHRLIT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for STRLIT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for INTLIT resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for UNDERSCORE resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for mientras resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for EQ resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for otro resolved using rule 52 (statement_list -> statements .)
  ! reduce/reduce conflict for TILDE resolved using rule 52 (statement_list -> statements .)
  ! shift/reduce conflict for otro resolved as shift
  ! reduce/reduce conflict for CLOSECURLY resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for introducir resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for imprimir resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for regresso resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for si resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for COMMENT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for CHRLIT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for STRLIT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for INTLIT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for UNDERSCORE resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for mientras resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for EQ resolved using rule 23 (empty -> .)
  ! shift/reduce conflict for otro resolved as shift
  ! reduce/reduce conflict for TILDE resolved using rule 23 (empty -> .)
    otro            shift and go to state 137
    CLOSECURLY      reduce using rule 23 (empty -> .)
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    CHRLIT          reduce using rule 23 (empty -> .)
    STRLIT          reduce using rule 23 (empty -> .)
    INTLIT          reduce using rule 23 (empty -> .)
    UNDERSCORE      reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)

  ! CLOSECURLY      [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! introducir      [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! imprimir        [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! regresso        [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! si              [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! COMMENT         [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! VAR             [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! CHRLIT          [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! STRLIT          [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! INTLIT          [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! UNDERSCORE      [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! mientras        [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! EQ              [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! otro            [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! TILDE           [ reduce using rule 54 (if -> si OPENPAR expression_list CLOSEPAR statements .) ]
  ! CLOSECURLY      [ reduce using rule 52 (statement_list -> statements .) ]
  ! introducir      [ reduce using rule 52 (statement_list -> statements .) ]
  ! imprimir        [ reduce using rule 52 (statement_list -> statements .) ]
  ! regresso        [ reduce using rule 52 (statement_list -> statements .) ]
  ! si              [ reduce using rule 52 (statement_list -> statements .) ]
  ! COMMENT         [ reduce using rule 52 (statement_list -> statements .) ]
  ! VAR             [ reduce using rule 52 (statement_list -> statements .) ]
  ! CHRLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! STRLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! INTLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! UNDERSCORE      [ reduce using rule 52 (statement_list -> statements .) ]
  ! mientras        [ reduce using rule 52 (statement_list -> statements .) ]
  ! EQ              [ reduce using rule 52 (statement_list -> statements .) ]
  ! otro            [ reduce using rule 52 (statement_list -> statements .) ]
  ! TILDE           [ reduce using rule 52 (statement_list -> statements .) ]
  ! otro            [ reduce using rule 23 (empty -> .) ]

    else_if                        shift and go to state 136
    empty                          shift and go to state 138

state 132

    (16) statements -> VAR ASSIGN expression imprimir OPENPAR . VAR CLOSEPAR

    VAR             shift and go to state 139


state 133

    (17) statements -> VAR ASSIGN STRLIT imprimir OPENPAR . VAR CLOSEPAR

    VAR             shift and go to state 140


state 134

    (58) while -> mientras OPENPAR expression_list CLOSEPAR TILDE . optional_statements TILDE
    (59) while -> mientras OPENPAR expression_list CLOSEPAR TILDE . optional_statements TILDE romperse
    (50) optional_statements -> . statement_list
    (51) optional_statements -> . empty
    (52) statement_list -> . statements
    (53) statement_list -> . statement_list statements
    (23) empty -> .
    (4) statements -> . identifier_list EQ expression
    (5) statements -> . introducir type
    (6) statements -> . imprimir OPENPAR identifier_list CLOSEPAR
    (7) statements -> . imprimir QUOTATION identifier_list QUOTATION
    (8) statements -> . regresso OPENPAR expression_list CLOSEPAR
    (9) statements -> . si OPENPAR expression_list CLOSEPAR otro statements
    (10) statements -> . optional_statements
    (11) statements -> . if
    (12) statements -> . while
    (13) statements -> . COMMENT
    (14) statements -> . imprimir OPENPAR expression CLOSEPAR
    (15) statements -> . imprimir OPENPAR STRLIT CLOSEPAR
    (16) statements -> . VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> . VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (54) if -> . si OPENPAR expression_list CLOSEPAR statements
    (55) if -> . si OPENPAR expression_list CLOSEPAR statements else_if
    (58) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse

  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
    EQ              reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)
    introducir      shift and go to state 10
    imprimir        shift and go to state 11
    regresso        shift and go to state 12
    si              shift and go to state 13
    COMMENT         shift and go to state 17
    VAR             shift and go to state 19
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    mientras        shift and go to state 25

  ! introducir      [ reduce using rule 23 (empty -> .) ]
  ! imprimir        [ reduce using rule 23 (empty -> .) ]
  ! regresso        [ reduce using rule 23 (empty -> .) ]
  ! si              [ reduce using rule 23 (empty -> .) ]
  ! COMMENT         [ reduce using rule 23 (empty -> .) ]
  ! VAR             [ reduce using rule 23 (empty -> .) ]
  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]
  ! mientras        [ reduce using rule 23 (empty -> .) ]

    optional_statements            shift and go to state 141
    statement_list                 shift and go to state 24
    empty                          shift and go to state 76
    statements                     shift and go to state 77
    identifier_list                shift and go to state 9
    if                             shift and go to state 15
    while                          shift and go to state 16

state 135

    (9) statements -> si OPENPAR expression_list CLOSEPAR otro statements .
    (52) statement_list -> statements .

  ! reduce/reduce conflict for CLOSECURLY resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for introducir resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for imprimir resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for regresso resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for si resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for COMMENT resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for VAR resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for CHRLIT resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for STRLIT resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for INTLIT resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for UNDERSCORE resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for mientras resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for EQ resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for otro resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
  ! reduce/reduce conflict for TILDE resolved using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    CLOSECURLY      reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    introducir      reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    imprimir        reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    regresso        reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    si              reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    COMMENT         reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    VAR             reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    CHRLIT          reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    STRLIT          reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    INTLIT          reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    UNDERSCORE      reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    mientras        reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    EQ              reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    otro            reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)
    TILDE           reduce using rule 9 (statements -> si OPENPAR expression_list CLOSEPAR otro statements .)

  ! CLOSECURLY      [ reduce using rule 52 (statement_list -> statements .) ]
  ! introducir      [ reduce using rule 52 (statement_list -> statements .) ]
  ! imprimir        [ reduce using rule 52 (statement_list -> statements .) ]
  ! regresso        [ reduce using rule 52 (statement_list -> statements .) ]
  ! si              [ reduce using rule 52 (statement_list -> statements .) ]
  ! COMMENT         [ reduce using rule 52 (statement_list -> statements .) ]
  ! VAR             [ reduce using rule 52 (statement_list -> statements .) ]
  ! CHRLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! STRLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! INTLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! UNDERSCORE      [ reduce using rule 52 (statement_list -> statements .) ]
  ! mientras        [ reduce using rule 52 (statement_list -> statements .) ]
  ! EQ              [ reduce using rule 52 (statement_list -> statements .) ]
  ! otro            [ reduce using rule 52 (statement_list -> statements .) ]
  ! TILDE           [ reduce using rule 52 (statement_list -> statements .) ]


state 136

    (55) if -> si OPENPAR expression_list CLOSEPAR statements else_if .

    CLOSECURLY      reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    introducir      reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    imprimir        reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    regresso        reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    si              reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    COMMENT         reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    VAR             reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    CHRLIT          reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    STRLIT          reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    INTLIT          reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    UNDERSCORE      reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    mientras        reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    EQ              reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    otro            reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)
    TILDE           reduce using rule 55 (if -> si OPENPAR expression_list CLOSEPAR statements else_if .)


state 137

    (56) else_if -> otro . OPENPAR expression CLOSEPAR statements else_if

    OPENPAR         shift and go to state 142


state 138

    (57) else_if -> empty .

    CLOSECURLY      reduce using rule 57 (else_if -> empty .)
    introducir      reduce using rule 57 (else_if -> empty .)
    imprimir        reduce using rule 57 (else_if -> empty .)
    regresso        reduce using rule 57 (else_if -> empty .)
    si              reduce using rule 57 (else_if -> empty .)
    COMMENT         reduce using rule 57 (else_if -> empty .)
    VAR             reduce using rule 57 (else_if -> empty .)
    CHRLIT          reduce using rule 57 (else_if -> empty .)
    STRLIT          reduce using rule 57 (else_if -> empty .)
    INTLIT          reduce using rule 57 (else_if -> empty .)
    UNDERSCORE      reduce using rule 57 (else_if -> empty .)
    mientras        reduce using rule 57 (else_if -> empty .)
    EQ              reduce using rule 57 (else_if -> empty .)
    otro            reduce using rule 57 (else_if -> empty .)
    TILDE           reduce using rule 57 (else_if -> empty .)


state 139

    (16) statements -> VAR ASSIGN expression imprimir OPENPAR VAR . CLOSEPAR

    CLOSEPAR        shift and go to state 143


state 140

    (17) statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR . CLOSEPAR

    CLOSEPAR        shift and go to state 144


state 141

    (58) while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements . TILDE
    (59) while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements . TILDE romperse
    (10) statements -> optional_statements .

  ! shift/reduce conflict for TILDE resolved as shift
    TILDE           shift and go to state 145
    introducir      reduce using rule 10 (statements -> optional_statements .)
    imprimir        reduce using rule 10 (statements -> optional_statements .)
    regresso        reduce using rule 10 (statements -> optional_statements .)
    si              reduce using rule 10 (statements -> optional_statements .)
    COMMENT         reduce using rule 10 (statements -> optional_statements .)
    VAR             reduce using rule 10 (statements -> optional_statements .)
    CHRLIT          reduce using rule 10 (statements -> optional_statements .)
    STRLIT          reduce using rule 10 (statements -> optional_statements .)
    INTLIT          reduce using rule 10 (statements -> optional_statements .)
    UNDERSCORE      reduce using rule 10 (statements -> optional_statements .)
    mientras        reduce using rule 10 (statements -> optional_statements .)
    EQ              reduce using rule 10 (statements -> optional_statements .)

  ! TILDE           [ reduce using rule 10 (statements -> optional_statements .) ]


state 142

    (56) else_if -> otro OPENPAR . expression CLOSEPAR statements else_if
    (24) expression -> . expression
    (25) expression -> . expression_list COMMA expression
    (26) expression -> . identifier_list
    (27) expression_list -> . logical_expression
    (28) expression_list -> . arithmetic_expression
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (29) logical_expression -> . expression < expression
    (30) logical_expression -> . expression > expression
    (31) logical_expression -> . expression LT expression
    (32) logical_expression -> . expression GT expression
    (33) logical_expression -> . expression = expression
    (34) logical_expression -> . expression NEQ expression
    (35) logical_expression -> . expression EQ expression
    (36) logical_expression -> . expression ! expression
    (37) logical_expression -> . expression OR expression
    (38) logical_expression -> . expression AND expression
    (39) logical_expression -> . NOT expression
    (40) arithmetic_expression -> . expression + expression
    (41) arithmetic_expression -> . expression - expression
    (42) arithmetic_expression -> . expression * expression
    (43) arithmetic_expression -> . expression / expression
    (44) arithmetic_expression -> . expression % expression
    (23) empty -> .

    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    NOT             shift and go to state 59
    CLOSEPAR        reduce using rule 23 (empty -> .)
    <               reduce using rule 23 (empty -> .)
    >               reduce using rule 23 (empty -> .)
    LT              reduce using rule 23 (empty -> .)
    GT              reduce using rule 23 (empty -> .)
    =               reduce using rule 23 (empty -> .)
    NEQ             reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    !               reduce using rule 23 (empty -> .)
    OR              reduce using rule 23 (empty -> .)
    AND             reduce using rule 23 (empty -> .)
    +               reduce using rule 23 (empty -> .)
    -               reduce using rule 23 (empty -> .)
    *               reduce using rule 23 (empty -> .)
    /               reduce using rule 23 (empty -> .)
    %               reduce using rule 23 (empty -> .)

    expression                     shift and go to state 146
    expression_list                shift and go to state 56
    identifier_list                shift and go to state 54
    logical_expression             shift and go to state 57
    arithmetic_expression          shift and go to state 58
    empty                          shift and go to state 43

state 143

    (16) statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .

    CLOSECURLY      reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    introducir      reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    imprimir        reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    regresso        reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    si              reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    COMMENT         reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    VAR             reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    CHRLIT          reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    STRLIT          reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    INTLIT          reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    UNDERSCORE      reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    mientras        reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    EQ              reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    otro            reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)
    TILDE           reduce using rule 16 (statements -> VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR .)


state 144

    (17) statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .

    CLOSECURLY      reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    introducir      reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    imprimir        reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    regresso        reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    si              reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    COMMENT         reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    VAR             reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    CHRLIT          reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    STRLIT          reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    INTLIT          reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    UNDERSCORE      reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    mientras        reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    EQ              reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    otro            reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)
    TILDE           reduce using rule 17 (statements -> VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR .)


state 145

    (58) while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .
    (59) while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE . romperse

    CLOSECURLY      reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    introducir      reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    imprimir        reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    regresso        reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    si              reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    COMMENT         reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    VAR             reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    CHRLIT          reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    STRLIT          reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    INTLIT          reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    UNDERSCORE      reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    mientras        reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    EQ              reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    otro            reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    TILDE           reduce using rule 58 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE .)
    romperse        shift and go to state 147


state 146

    (56) else_if -> otro OPENPAR expression . CLOSEPAR statements else_if
    (24) expression -> expression .
    (29) logical_expression -> expression . < expression
    (30) logical_expression -> expression . > expression
    (31) logical_expression -> expression . LT expression
    (32) logical_expression -> expression . GT expression
    (33) logical_expression -> expression . = expression
    (34) logical_expression -> expression . NEQ expression
    (35) logical_expression -> expression . EQ expression
    (36) logical_expression -> expression . ! expression
    (37) logical_expression -> expression . OR expression
    (38) logical_expression -> expression . AND expression
    (40) arithmetic_expression -> expression . + expression
    (41) arithmetic_expression -> expression . - expression
    (42) arithmetic_expression -> expression . * expression
    (43) arithmetic_expression -> expression . / expression
    (44) arithmetic_expression -> expression . % expression

  ! shift/reduce conflict for CLOSEPAR resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    CLOSEPAR        shift and go to state 148
    <               shift and go to state 81
    >               shift and go to state 82
    LT              shift and go to state 83
    GT              shift and go to state 84
    =               shift and go to state 85
    NEQ             shift and go to state 86
    EQ              shift and go to state 80
    !               shift and go to state 87
    OR              shift and go to state 88
    AND             shift and go to state 89
    +               shift and go to state 90
    -               shift and go to state 91
    *               shift and go to state 92
    /               shift and go to state 93
    %               shift and go to state 94

  ! CLOSEPAR        [ reduce using rule 24 (expression -> expression .) ]
  ! <               [ reduce using rule 24 (expression -> expression .) ]
  ! >               [ reduce using rule 24 (expression -> expression .) ]
  ! LT              [ reduce using rule 24 (expression -> expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression .) ]
  ! =               [ reduce using rule 24 (expression -> expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression .) ]
  ! !               [ reduce using rule 24 (expression -> expression .) ]
  ! OR              [ reduce using rule 24 (expression -> expression .) ]
  ! AND             [ reduce using rule 24 (expression -> expression .) ]
  ! +               [ reduce using rule 24 (expression -> expression .) ]
  ! -               [ reduce using rule 24 (expression -> expression .) ]
  ! *               [ reduce using rule 24 (expression -> expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression .) ]
  ! %               [ reduce using rule 24 (expression -> expression .) ]


state 147

    (59) while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .

    CLOSECURLY      reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    introducir      reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    imprimir        reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    regresso        reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    si              reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    COMMENT         reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    VAR             reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    CHRLIT          reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    STRLIT          reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    INTLIT          reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    UNDERSCORE      reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    mientras        reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    EQ              reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    otro            reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)
    TILDE           reduce using rule 59 (while -> mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse .)


state 148

    (56) else_if -> otro OPENPAR expression CLOSEPAR . statements else_if
    (4) statements -> . identifier_list EQ expression
    (5) statements -> . introducir type
    (6) statements -> . imprimir OPENPAR identifier_list CLOSEPAR
    (7) statements -> . imprimir QUOTATION identifier_list QUOTATION
    (8) statements -> . regresso OPENPAR expression_list CLOSEPAR
    (9) statements -> . si OPENPAR expression_list CLOSEPAR otro statements
    (10) statements -> . optional_statements
    (11) statements -> . if
    (12) statements -> . while
    (13) statements -> . COMMENT
    (14) statements -> . imprimir OPENPAR expression CLOSEPAR
    (15) statements -> . imprimir OPENPAR STRLIT CLOSEPAR
    (16) statements -> . VAR ASSIGN expression imprimir OPENPAR VAR CLOSEPAR
    (17) statements -> . VAR ASSIGN STRLIT imprimir OPENPAR VAR CLOSEPAR
    (18) identifier_list -> . CHRLIT identifier_list
    (19) identifier_list -> . STRLIT identifier_list
    (20) identifier_list -> . INTLIT identifier_list
    (21) identifier_list -> . UNDERSCORE
    (22) identifier_list -> . empty
    (50) optional_statements -> . statement_list
    (51) optional_statements -> . empty
    (54) if -> . si OPENPAR expression_list CLOSEPAR statements
    (55) if -> . si OPENPAR expression_list CLOSEPAR statements else_if
    (58) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE
    (59) while -> . mientras OPENPAR expression_list CLOSEPAR TILDE optional_statements TILDE romperse
    (23) empty -> .
    (52) statement_list -> . statements
    (53) statement_list -> . statement_list statements

  ! shift/reduce conflict for introducir resolved as shift
  ! shift/reduce conflict for imprimir resolved as shift
  ! shift/reduce conflict for regresso resolved as shift
  ! shift/reduce conflict for si resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CHRLIT resolved as shift
  ! shift/reduce conflict for STRLIT resolved as shift
  ! shift/reduce conflict for INTLIT resolved as shift
  ! shift/reduce conflict for UNDERSCORE resolved as shift
  ! shift/reduce conflict for mientras resolved as shift
    introducir      shift and go to state 10
    imprimir        shift and go to state 11
    regresso        shift and go to state 12
    si              shift and go to state 13
    COMMENT         shift and go to state 17
    VAR             shift and go to state 19
    CHRLIT          shift and go to state 20
    STRLIT          shift and go to state 18
    INTLIT          shift and go to state 21
    UNDERSCORE      shift and go to state 22
    mientras        shift and go to state 25
    EQ              reduce using rule 23 (empty -> .)
    CLOSECURLY      reduce using rule 23 (empty -> .)
    otro            reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)

  ! introducir      [ reduce using rule 23 (empty -> .) ]
  ! imprimir        [ reduce using rule 23 (empty -> .) ]
  ! regresso        [ reduce using rule 23 (empty -> .) ]
  ! si              [ reduce using rule 23 (empty -> .) ]
  ! COMMENT         [ reduce using rule 23 (empty -> .) ]
  ! VAR             [ reduce using rule 23 (empty -> .) ]
  ! CHRLIT          [ reduce using rule 23 (empty -> .) ]
  ! STRLIT          [ reduce using rule 23 (empty -> .) ]
  ! INTLIT          [ reduce using rule 23 (empty -> .) ]
  ! UNDERSCORE      [ reduce using rule 23 (empty -> .) ]
  ! mientras        [ reduce using rule 23 (empty -> .) ]

    statements                     shift and go to state 149
    identifier_list                shift and go to state 9
    optional_statements            shift and go to state 14
    if                             shift and go to state 15
    while                          shift and go to state 16
    empty                          shift and go to state 23
    statement_list                 shift and go to state 24

state 149

    (56) else_if -> otro OPENPAR expression CLOSEPAR statements . else_if
    (52) statement_list -> statements .
    (56) else_if -> . otro OPENPAR expression CLOSEPAR statements else_if
    (57) else_if -> . empty
    (23) empty -> .

  ! shift/reduce conflict for otro resolved as shift
  ! reduce/reduce conflict for CLOSECURLY resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for introducir resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for imprimir resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for regresso resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for si resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for COMMENT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for CHRLIT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for STRLIT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for INTLIT resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for UNDERSCORE resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for mientras resolved using rule 23 (empty -> .)
  ! reduce/reduce conflict for EQ resolved using rule 23 (empty -> .)
  ! shift/reduce conflict for otro resolved as shift
  ! reduce/reduce conflict for TILDE resolved using rule 23 (empty -> .)
    otro            shift and go to state 137
    CLOSECURLY      reduce using rule 23 (empty -> .)
    introducir      reduce using rule 23 (empty -> .)
    imprimir        reduce using rule 23 (empty -> .)
    regresso        reduce using rule 23 (empty -> .)
    si              reduce using rule 23 (empty -> .)
    COMMENT         reduce using rule 23 (empty -> .)
    VAR             reduce using rule 23 (empty -> .)
    CHRLIT          reduce using rule 23 (empty -> .)
    STRLIT          reduce using rule 23 (empty -> .)
    INTLIT          reduce using rule 23 (empty -> .)
    UNDERSCORE      reduce using rule 23 (empty -> .)
    mientras        reduce using rule 23 (empty -> .)
    EQ              reduce using rule 23 (empty -> .)
    TILDE           reduce using rule 23 (empty -> .)

  ! CLOSECURLY      [ reduce using rule 52 (statement_list -> statements .) ]
  ! introducir      [ reduce using rule 52 (statement_list -> statements .) ]
  ! imprimir        [ reduce using rule 52 (statement_list -> statements .) ]
  ! regresso        [ reduce using rule 52 (statement_list -> statements .) ]
  ! si              [ reduce using rule 52 (statement_list -> statements .) ]
  ! COMMENT         [ reduce using rule 52 (statement_list -> statements .) ]
  ! VAR             [ reduce using rule 52 (statement_list -> statements .) ]
  ! CHRLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! STRLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! INTLIT          [ reduce using rule 52 (statement_list -> statements .) ]
  ! UNDERSCORE      [ reduce using rule 52 (statement_list -> statements .) ]
  ! mientras        [ reduce using rule 52 (statement_list -> statements .) ]
  ! EQ              [ reduce using rule 52 (statement_list -> statements .) ]
  ! otro            [ reduce using rule 52 (statement_list -> statements .) ]
  ! TILDE           [ reduce using rule 52 (statement_list -> statements .) ]
  ! otro            [ reduce using rule 23 (empty -> .) ]

    else_if                        shift and go to state 150
    empty                          shift and go to state 138

state 150

    (56) else_if -> otro OPENPAR expression CLOSEPAR statements else_if .

    CLOSECURLY      reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    introducir      reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    imprimir        reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    regresso        reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    si              reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    COMMENT         reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    VAR             reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    CHRLIT          reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    STRLIT          reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    INTLIT          reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    UNDERSCORE      reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    mientras        reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    EQ              reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    otro            reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)
    TILDE           reduce using rule 56 (else_if -> otro OPENPAR expression CLOSEPAR statements else_if .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for introducir in state 3 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 3 resolved as shift
WARNING: shift/reduce conflict for regresso in state 3 resolved as shift
WARNING: shift/reduce conflict for si in state 3 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for VAR in state 3 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 3 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 3 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 3 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 3 resolved as shift
WARNING: shift/reduce conflict for mientras in state 3 resolved as shift
WARNING: shift/reduce conflict for CLOSECURLY in state 8 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 18 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 18 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 18 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 18 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 20 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 20 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 20 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 20 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 21 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 21 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 21 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 21 resolved as shift
WARNING: shift/reduce conflict for introducir in state 24 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 24 resolved as shift
WARNING: shift/reduce conflict for regresso in state 24 resolved as shift
WARNING: shift/reduce conflict for si in state 24 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 24 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 24 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 24 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 24 resolved as shift
WARNING: shift/reduce conflict for mientras in state 24 resolved as shift
WARNING: shift/reduce conflict for introducir in state 24 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 24 resolved as shift
WARNING: shift/reduce conflict for regresso in state 24 resolved as shift
WARNING: shift/reduce conflict for si in state 24 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 24 resolved as shift
WARNING: shift/reduce conflict for VAR in state 24 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 24 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 24 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 24 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 24 resolved as shift
WARNING: shift/reduce conflict for mientras in state 24 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 28 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 28 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 28 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 28 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 31 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 31 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 31 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 31 resolved as shift
WARNING: shift/reduce conflict for introducir in state 49 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 49 resolved as shift
WARNING: shift/reduce conflict for regresso in state 49 resolved as shift
WARNING: shift/reduce conflict for si in state 49 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 49 resolved as shift
WARNING: shift/reduce conflict for VAR in state 49 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 49 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 49 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 49 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 49 resolved as shift
WARNING: shift/reduce conflict for mientras in state 49 resolved as shift
WARNING: shift/reduce conflict for < in state 55 resolved as shift
WARNING: shift/reduce conflict for > in state 55 resolved as shift
WARNING: shift/reduce conflict for LT in state 55 resolved as shift
WARNING: shift/reduce conflict for GT in state 55 resolved as shift
WARNING: shift/reduce conflict for = in state 55 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 55 resolved as shift
WARNING: shift/reduce conflict for EQ in state 55 resolved as shift
WARNING: shift/reduce conflict for ! in state 55 resolved as shift
WARNING: shift/reduce conflict for OR in state 55 resolved as shift
WARNING: shift/reduce conflict for AND in state 55 resolved as shift
WARNING: shift/reduce conflict for + in state 55 resolved as shift
WARNING: shift/reduce conflict for - in state 55 resolved as shift
WARNING: shift/reduce conflict for * in state 55 resolved as shift
WARNING: shift/reduce conflict for / in state 55 resolved as shift
WARNING: shift/reduce conflict for % in state 55 resolved as shift
WARNING: shift/reduce conflict for CLOSEPAR in state 65 resolved as shift
WARNING: shift/reduce conflict for CLOSEPAR in state 66 resolved as shift
WARNING: shift/reduce conflict for < in state 66 resolved as shift
WARNING: shift/reduce conflict for > in state 66 resolved as shift
WARNING: shift/reduce conflict for LT in state 66 resolved as shift
WARNING: shift/reduce conflict for GT in state 66 resolved as shift
WARNING: shift/reduce conflict for = in state 66 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for ! in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for + in state 66 resolved as shift
WARNING: shift/reduce conflict for - in state 66 resolved as shift
WARNING: shift/reduce conflict for * in state 66 resolved as shift
WARNING: shift/reduce conflict for / in state 66 resolved as shift
WARNING: shift/reduce conflict for % in state 66 resolved as shift
WARNING: shift/reduce conflict for CLOSEPAR in state 67 resolved as shift
WARNING: shift/reduce conflict for < in state 70 resolved as shift
WARNING: shift/reduce conflict for > in state 70 resolved as shift
WARNING: shift/reduce conflict for LT in state 70 resolved as shift
WARNING: shift/reduce conflict for GT in state 70 resolved as shift
WARNING: shift/reduce conflict for = in state 70 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for ! in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for + in state 70 resolved as shift
WARNING: shift/reduce conflict for - in state 70 resolved as shift
WARNING: shift/reduce conflict for * in state 70 resolved as shift
WARNING: shift/reduce conflict for / in state 70 resolved as shift
WARNING: shift/reduce conflict for % in state 70 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 72 resolved as shift
WARNING: shift/reduce conflict for < in state 72 resolved as shift
WARNING: shift/reduce conflict for > in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for = in state 72 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for ! in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for + in state 72 resolved as shift
WARNING: shift/reduce conflict for - in state 72 resolved as shift
WARNING: shift/reduce conflict for * in state 72 resolved as shift
WARNING: shift/reduce conflict for / in state 72 resolved as shift
WARNING: shift/reduce conflict for % in state 72 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 73 resolved as shift
WARNING: shift/reduce conflict for CLOSECURLY in state 75 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 95 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 95 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 95 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 95 resolved as shift
WARNING: shift/reduce conflict for < in state 96 resolved as shift
WARNING: shift/reduce conflict for > in state 96 resolved as shift
WARNING: shift/reduce conflict for LT in state 96 resolved as shift
WARNING: shift/reduce conflict for GT in state 96 resolved as shift
WARNING: shift/reduce conflict for = in state 96 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for ! in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for + in state 96 resolved as shift
WARNING: shift/reduce conflict for - in state 96 resolved as shift
WARNING: shift/reduce conflict for * in state 96 resolved as shift
WARNING: shift/reduce conflict for / in state 96 resolved as shift
WARNING: shift/reduce conflict for % in state 96 resolved as shift
WARNING: shift/reduce conflict for introducir in state 107 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 107 resolved as shift
WARNING: shift/reduce conflict for regresso in state 107 resolved as shift
WARNING: shift/reduce conflict for si in state 107 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 107 resolved as shift
WARNING: shift/reduce conflict for VAR in state 107 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 107 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 107 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 107 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 107 resolved as shift
WARNING: shift/reduce conflict for mientras in state 107 resolved as shift
WARNING: shift/reduce conflict for otro in state 107 resolved as shift
WARNING: shift/reduce conflict for < in state 114 resolved as shift
WARNING: shift/reduce conflict for > in state 114 resolved as shift
WARNING: shift/reduce conflict for LT in state 114 resolved as shift
WARNING: shift/reduce conflict for GT in state 114 resolved as shift
WARNING: shift/reduce conflict for = in state 114 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 114 resolved as shift
WARNING: shift/reduce conflict for EQ in state 114 resolved as shift
WARNING: shift/reduce conflict for ! in state 114 resolved as shift
WARNING: shift/reduce conflict for OR in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for + in state 114 resolved as shift
WARNING: shift/reduce conflict for - in state 114 resolved as shift
WARNING: shift/reduce conflict for * in state 114 resolved as shift
WARNING: shift/reduce conflict for / in state 114 resolved as shift
WARNING: shift/reduce conflict for % in state 114 resolved as shift
WARNING: shift/reduce conflict for < in state 115 resolved as shift
WARNING: shift/reduce conflict for > in state 115 resolved as shift
WARNING: shift/reduce conflict for LT in state 115 resolved as shift
WARNING: shift/reduce conflict for GT in state 115 resolved as shift
WARNING: shift/reduce conflict for = in state 115 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 115 resolved as shift
WARNING: shift/reduce conflict for EQ in state 115 resolved as shift
WARNING: shift/reduce conflict for ! in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for + in state 115 resolved as shift
WARNING: shift/reduce conflict for - in state 115 resolved as shift
WARNING: shift/reduce conflict for * in state 115 resolved as shift
WARNING: shift/reduce conflict for / in state 115 resolved as shift
WARNING: shift/reduce conflict for % in state 115 resolved as shift
WARNING: shift/reduce conflict for < in state 116 resolved as shift
WARNING: shift/reduce conflict for > in state 116 resolved as shift
WARNING: shift/reduce conflict for LT in state 116 resolved as shift
WARNING: shift/reduce conflict for GT in state 116 resolved as shift
WARNING: shift/reduce conflict for = in state 116 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 116 resolved as shift
WARNING: shift/reduce conflict for EQ in state 116 resolved as shift
WARNING: shift/reduce conflict for ! in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for + in state 116 resolved as shift
WARNING: shift/reduce conflict for - in state 116 resolved as shift
WARNING: shift/reduce conflict for * in state 116 resolved as shift
WARNING: shift/reduce conflict for / in state 116 resolved as shift
WARNING: shift/reduce conflict for % in state 116 resolved as shift
WARNING: shift/reduce conflict for < in state 117 resolved as shift
WARNING: shift/reduce conflict for > in state 117 resolved as shift
WARNING: shift/reduce conflict for LT in state 117 resolved as shift
WARNING: shift/reduce conflict for GT in state 117 resolved as shift
WARNING: shift/reduce conflict for = in state 117 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 117 resolved as shift
WARNING: shift/reduce conflict for EQ in state 117 resolved as shift
WARNING: shift/reduce conflict for ! in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for + in state 117 resolved as shift
WARNING: shift/reduce conflict for - in state 117 resolved as shift
WARNING: shift/reduce conflict for * in state 117 resolved as shift
WARNING: shift/reduce conflict for / in state 117 resolved as shift
WARNING: shift/reduce conflict for % in state 117 resolved as shift
WARNING: shift/reduce conflict for < in state 118 resolved as shift
WARNING: shift/reduce conflict for > in state 118 resolved as shift
WARNING: shift/reduce conflict for LT in state 118 resolved as shift
WARNING: shift/reduce conflict for GT in state 118 resolved as shift
WARNING: shift/reduce conflict for = in state 118 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for ! in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for + in state 118 resolved as shift
WARNING: shift/reduce conflict for - in state 118 resolved as shift
WARNING: shift/reduce conflict for * in state 118 resolved as shift
WARNING: shift/reduce conflict for / in state 118 resolved as shift
WARNING: shift/reduce conflict for % in state 118 resolved as shift
WARNING: shift/reduce conflict for < in state 119 resolved as shift
WARNING: shift/reduce conflict for > in state 119 resolved as shift
WARNING: shift/reduce conflict for LT in state 119 resolved as shift
WARNING: shift/reduce conflict for GT in state 119 resolved as shift
WARNING: shift/reduce conflict for = in state 119 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for EQ in state 119 resolved as shift
WARNING: shift/reduce conflict for ! in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for + in state 119 resolved as shift
WARNING: shift/reduce conflict for - in state 119 resolved as shift
WARNING: shift/reduce conflict for * in state 119 resolved as shift
WARNING: shift/reduce conflict for / in state 119 resolved as shift
WARNING: shift/reduce conflict for % in state 119 resolved as shift
WARNING: shift/reduce conflict for < in state 120 resolved as shift
WARNING: shift/reduce conflict for > in state 120 resolved as shift
WARNING: shift/reduce conflict for LT in state 120 resolved as shift
WARNING: shift/reduce conflict for GT in state 120 resolved as shift
WARNING: shift/reduce conflict for = in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for EQ in state 120 resolved as shift
WARNING: shift/reduce conflict for ! in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for + in state 120 resolved as shift
WARNING: shift/reduce conflict for - in state 120 resolved as shift
WARNING: shift/reduce conflict for * in state 120 resolved as shift
WARNING: shift/reduce conflict for / in state 120 resolved as shift
WARNING: shift/reduce conflict for % in state 120 resolved as shift
WARNING: shift/reduce conflict for < in state 121 resolved as shift
WARNING: shift/reduce conflict for > in state 121 resolved as shift
WARNING: shift/reduce conflict for LT in state 121 resolved as shift
WARNING: shift/reduce conflict for GT in state 121 resolved as shift
WARNING: shift/reduce conflict for = in state 121 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for EQ in state 121 resolved as shift
WARNING: shift/reduce conflict for ! in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for + in state 121 resolved as shift
WARNING: shift/reduce conflict for - in state 121 resolved as shift
WARNING: shift/reduce conflict for * in state 121 resolved as shift
WARNING: shift/reduce conflict for / in state 121 resolved as shift
WARNING: shift/reduce conflict for % in state 121 resolved as shift
WARNING: shift/reduce conflict for < in state 122 resolved as shift
WARNING: shift/reduce conflict for > in state 122 resolved as shift
WARNING: shift/reduce conflict for LT in state 122 resolved as shift
WARNING: shift/reduce conflict for GT in state 122 resolved as shift
WARNING: shift/reduce conflict for = in state 122 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for EQ in state 122 resolved as shift
WARNING: shift/reduce conflict for ! in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for + in state 122 resolved as shift
WARNING: shift/reduce conflict for - in state 122 resolved as shift
WARNING: shift/reduce conflict for * in state 122 resolved as shift
WARNING: shift/reduce conflict for / in state 122 resolved as shift
WARNING: shift/reduce conflict for % in state 122 resolved as shift
WARNING: shift/reduce conflict for < in state 123 resolved as shift
WARNING: shift/reduce conflict for > in state 123 resolved as shift
WARNING: shift/reduce conflict for LT in state 123 resolved as shift
WARNING: shift/reduce conflict for GT in state 123 resolved as shift
WARNING: shift/reduce conflict for = in state 123 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 123 resolved as shift
WARNING: shift/reduce conflict for EQ in state 123 resolved as shift
WARNING: shift/reduce conflict for ! in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for + in state 123 resolved as shift
WARNING: shift/reduce conflict for - in state 123 resolved as shift
WARNING: shift/reduce conflict for * in state 123 resolved as shift
WARNING: shift/reduce conflict for / in state 123 resolved as shift
WARNING: shift/reduce conflict for % in state 123 resolved as shift
WARNING: shift/reduce conflict for < in state 124 resolved as shift
WARNING: shift/reduce conflict for > in state 124 resolved as shift
WARNING: shift/reduce conflict for LT in state 124 resolved as shift
WARNING: shift/reduce conflict for GT in state 124 resolved as shift
WARNING: shift/reduce conflict for = in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 124 resolved as shift
WARNING: shift/reduce conflict for EQ in state 124 resolved as shift
WARNING: shift/reduce conflict for ! in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for + in state 124 resolved as shift
WARNING: shift/reduce conflict for - in state 124 resolved as shift
WARNING: shift/reduce conflict for * in state 124 resolved as shift
WARNING: shift/reduce conflict for / in state 124 resolved as shift
WARNING: shift/reduce conflict for % in state 124 resolved as shift
WARNING: shift/reduce conflict for < in state 125 resolved as shift
WARNING: shift/reduce conflict for > in state 125 resolved as shift
WARNING: shift/reduce conflict for LT in state 125 resolved as shift
WARNING: shift/reduce conflict for GT in state 125 resolved as shift
WARNING: shift/reduce conflict for = in state 125 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for ! in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for + in state 125 resolved as shift
WARNING: shift/reduce conflict for - in state 125 resolved as shift
WARNING: shift/reduce conflict for * in state 125 resolved as shift
WARNING: shift/reduce conflict for / in state 125 resolved as shift
WARNING: shift/reduce conflict for % in state 125 resolved as shift
WARNING: shift/reduce conflict for < in state 126 resolved as shift
WARNING: shift/reduce conflict for > in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for = in state 126 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for ! in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for + in state 126 resolved as shift
WARNING: shift/reduce conflict for - in state 126 resolved as shift
WARNING: shift/reduce conflict for * in state 126 resolved as shift
WARNING: shift/reduce conflict for / in state 126 resolved as shift
WARNING: shift/reduce conflict for % in state 126 resolved as shift
WARNING: shift/reduce conflict for < in state 127 resolved as shift
WARNING: shift/reduce conflict for > in state 127 resolved as shift
WARNING: shift/reduce conflict for LT in state 127 resolved as shift
WARNING: shift/reduce conflict for GT in state 127 resolved as shift
WARNING: shift/reduce conflict for = in state 127 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 127 resolved as shift
WARNING: shift/reduce conflict for EQ in state 127 resolved as shift
WARNING: shift/reduce conflict for ! in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for + in state 127 resolved as shift
WARNING: shift/reduce conflict for - in state 127 resolved as shift
WARNING: shift/reduce conflict for * in state 127 resolved as shift
WARNING: shift/reduce conflict for / in state 127 resolved as shift
WARNING: shift/reduce conflict for % in state 127 resolved as shift
WARNING: shift/reduce conflict for < in state 128 resolved as shift
WARNING: shift/reduce conflict for > in state 128 resolved as shift
WARNING: shift/reduce conflict for LT in state 128 resolved as shift
WARNING: shift/reduce conflict for GT in state 128 resolved as shift
WARNING: shift/reduce conflict for = in state 128 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 128 resolved as shift
WARNING: shift/reduce conflict for EQ in state 128 resolved as shift
WARNING: shift/reduce conflict for ! in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for + in state 128 resolved as shift
WARNING: shift/reduce conflict for - in state 128 resolved as shift
WARNING: shift/reduce conflict for * in state 128 resolved as shift
WARNING: shift/reduce conflict for / in state 128 resolved as shift
WARNING: shift/reduce conflict for % in state 128 resolved as shift
WARNING: shift/reduce conflict for < in state 129 resolved as shift
WARNING: shift/reduce conflict for > in state 129 resolved as shift
WARNING: shift/reduce conflict for LT in state 129 resolved as shift
WARNING: shift/reduce conflict for GT in state 129 resolved as shift
WARNING: shift/reduce conflict for = in state 129 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for EQ in state 129 resolved as shift
WARNING: shift/reduce conflict for ! in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for + in state 129 resolved as shift
WARNING: shift/reduce conflict for - in state 129 resolved as shift
WARNING: shift/reduce conflict for * in state 129 resolved as shift
WARNING: shift/reduce conflict for / in state 129 resolved as shift
WARNING: shift/reduce conflict for % in state 129 resolved as shift
WARNING: shift/reduce conflict for introducir in state 130 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 130 resolved as shift
WARNING: shift/reduce conflict for regresso in state 130 resolved as shift
WARNING: shift/reduce conflict for si in state 130 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 130 resolved as shift
WARNING: shift/reduce conflict for VAR in state 130 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 130 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 130 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 130 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 130 resolved as shift
WARNING: shift/reduce conflict for mientras in state 130 resolved as shift
WARNING: shift/reduce conflict for otro in state 131 resolved as shift
WARNING: shift/reduce conflict for otro in state 131 resolved as shift
WARNING: shift/reduce conflict for introducir in state 134 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 134 resolved as shift
WARNING: shift/reduce conflict for regresso in state 134 resolved as shift
WARNING: shift/reduce conflict for si in state 134 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 134 resolved as shift
WARNING: shift/reduce conflict for VAR in state 134 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 134 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 134 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 134 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 134 resolved as shift
WARNING: shift/reduce conflict for mientras in state 134 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 141 resolved as shift
WARNING: shift/reduce conflict for CLOSEPAR in state 146 resolved as shift
WARNING: shift/reduce conflict for < in state 146 resolved as shift
WARNING: shift/reduce conflict for > in state 146 resolved as shift
WARNING: shift/reduce conflict for LT in state 146 resolved as shift
WARNING: shift/reduce conflict for GT in state 146 resolved as shift
WARNING: shift/reduce conflict for = in state 146 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 146 resolved as shift
WARNING: shift/reduce conflict for EQ in state 146 resolved as shift
WARNING: shift/reduce conflict for ! in state 146 resolved as shift
WARNING: shift/reduce conflict for OR in state 146 resolved as shift
WARNING: shift/reduce conflict for AND in state 146 resolved as shift
WARNING: shift/reduce conflict for + in state 146 resolved as shift
WARNING: shift/reduce conflict for - in state 146 resolved as shift
WARNING: shift/reduce conflict for * in state 146 resolved as shift
WARNING: shift/reduce conflict for / in state 146 resolved as shift
WARNING: shift/reduce conflict for % in state 146 resolved as shift
WARNING: shift/reduce conflict for introducir in state 148 resolved as shift
WARNING: shift/reduce conflict for imprimir in state 148 resolved as shift
WARNING: shift/reduce conflict for regresso in state 148 resolved as shift
WARNING: shift/reduce conflict for si in state 148 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 148 resolved as shift
WARNING: shift/reduce conflict for VAR in state 148 resolved as shift
WARNING: shift/reduce conflict for CHRLIT in state 148 resolved as shift
WARNING: shift/reduce conflict for STRLIT in state 148 resolved as shift
WARNING: shift/reduce conflict for INTLIT in state 148 resolved as shift
WARNING: shift/reduce conflict for UNDERSCORE in state 148 resolved as shift
WARNING: shift/reduce conflict for mientras in state 148 resolved as shift
WARNING: shift/reduce conflict for otro in state 149 resolved as shift
WARNING: shift/reduce conflict for otro in state 149 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (identifier_list -> empty)
WARNING: rejected rule (optional_statements -> empty) in state 23
WARNING: reduce/reduce conflict in state 24 resolved using rule (empty -> <empty>)
WARNING: rejected rule (optional_statements -> statement_list) in state 24
WARNING: reduce/reduce conflict in state 47 resolved using rule (statement_list -> statements)
WARNING: rejected rule (statement_list -> statement_list statements) in state 47
WARNING: reduce/reduce conflict in state 55 resolved using rule (statements -> identifier_list EQ expression)
WARNING: rejected rule (expression -> expression) in state 55
WARNING: reduce/reduce conflict in state 76 resolved using rule (identifier_list -> empty)
WARNING: rejected rule (optional_statements -> empty) in state 76
WARNING: reduce/reduce conflict in state 96 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> NOT expression) in state 96
WARNING: reduce/reduce conflict in state 114 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression EQ expression) in state 114
WARNING: reduce/reduce conflict in state 115 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression < expression) in state 115
WARNING: reduce/reduce conflict in state 116 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression > expression) in state 116
WARNING: reduce/reduce conflict in state 117 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression LT expression) in state 117
WARNING: reduce/reduce conflict in state 118 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression GT expression) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression = expression) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression NEQ expression) in state 120
WARNING: reduce/reduce conflict in state 121 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression ! expression) in state 121
WARNING: reduce/reduce conflict in state 122 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression OR expression) in state 122
WARNING: reduce/reduce conflict in state 123 resolved using rule (expression -> expression)
WARNING: rejected rule (logical_expression -> expression AND expression) in state 123
WARNING: reduce/reduce conflict in state 124 resolved using rule (expression -> expression)
WARNING: rejected rule (arithmetic_expression -> expression + expression) in state 124
WARNING: reduce/reduce conflict in state 125 resolved using rule (expression -> expression)
WARNING: rejected rule (arithmetic_expression -> expression - expression) in state 125
WARNING: reduce/reduce conflict in state 126 resolved using rule (expression -> expression)
WARNING: rejected rule (arithmetic_expression -> expression * expression) in state 126
WARNING: reduce/reduce conflict in state 127 resolved using rule (expression -> expression)
WARNING: rejected rule (arithmetic_expression -> expression / expression) in state 127
WARNING: reduce/reduce conflict in state 128 resolved using rule (expression -> expression)
WARNING: rejected rule (arithmetic_expression -> expression % expression) in state 128
WARNING: reduce/reduce conflict in state 129 resolved using rule (expression -> expression)
WARNING: rejected rule (expression -> expression_list COMMA expression) in state 129
WARNING: reduce/reduce conflict in state 131 resolved using rule (statement_list -> statements)
WARNING: rejected rule (if -> si OPENPAR expression_list CLOSEPAR statements) in state 131
WARNING: reduce/reduce conflict in state 131 resolved using rule (empty -> <empty>)
WARNING: rejected rule (statement_list -> statements) in state 131
WARNING: reduce/reduce conflict in state 135 resolved using rule (statements -> si OPENPAR expression_list CLOSEPAR otro statements)
WARNING: rejected rule (statement_list -> statements) in state 135
WARNING: reduce/reduce conflict in state 149 resolved using rule (empty -> <empty>)
WARNING: rejected rule (statement_list -> statements) in state 149
WARNING: Rule (optional_statements -> statement_list) is never reduced
WARNING: Rule (statement_list -> statement_list statements) is never reduced
WARNING: Rule (logical_expression -> NOT expression) is never reduced
WARNING: Rule (logical_expression -> expression EQ expression) is never reduced
WARNING: Rule (logical_expression -> expression < expression) is never reduced
WARNING: Rule (logical_expression -> expression > expression) is never reduced
WARNING: Rule (logical_expression -> expression LT expression) is never reduced
WARNING: Rule (logical_expression -> expression GT expression) is never reduced
WARNING: Rule (logical_expression -> expression = expression) is never reduced
WARNING: Rule (logical_expression -> expression NEQ expression) is never reduced
WARNING: Rule (logical_expression -> expression ! expression) is never reduced
WARNING: Rule (logical_expression -> expression OR expression) is never reduced
WARNING: Rule (logical_expression -> expression AND expression) is never reduced
WARNING: Rule (arithmetic_expression -> expression + expression) is never reduced
WARNING: Rule (arithmetic_expression -> expression - expression) is never reduced
WARNING: Rule (arithmetic_expression -> expression * expression) is never reduced
WARNING: Rule (arithmetic_expression -> expression / expression) is never reduced
WARNING: Rule (arithmetic_expression -> expression % expression) is never reduced
WARNING: Rule (expression -> expression_list COMMA expression) is never reduced
WARNING: Rule (if -> si OPENPAR expression_list CLOSEPAR statements) is never reduced
